{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { replaceVariables } from 'utils/string';\nexport function filterKeys(obj1 = {}, obj2 = {}, filterMap = []) {\n  const merged = _objectSpread(_objectSpread({}, obj1), obj2);\n\n  const filtered = {};\n  Object.keys(merged).forEach(key => {\n    if (filterMap.includes(key)) {\n      filtered[key] = merged[key];\n    }\n  });\n  return filtered;\n}\nexport function deserialize(json) {\n  const instance = _objectSpread({}, json);\n\n  for (const prop in json) {\n    if (!json[prop]) {\n      instance[prop] = json[prop];\n    }\n\n    if (Array.isArray(json[prop])) {\n      instance[prop] = json[prop];\n    } else if (typeof json[prop] === 'object') {\n      instance[prop] = deserialize(json[prop]);\n    } else {\n      instance[prop] = json[prop];\n    }\n  }\n\n  return instance;\n}\nexport function replaceObjectVariables(object, variables) {\n  if (typeof object === 'string') {\n    return replaceVariables(object, variables);\n  }\n\n  if (!object || object.constructor !== Object) {\n    return object;\n  }\n\n  for (const prop in object) {\n    if (!object[prop]) {\n      continue;\n    }\n\n    if (Array.isArray(object[prop])) {\n      object[prop] = object[prop].map(propValue => replaceObjectVariables(propValue, variables));\n    } else if (typeof object[prop] === 'object') {\n      object[prop] = replaceObjectVariables(object[prop], variables);\n    } else if (typeof object[prop] === 'string') {\n      object[prop] = replaceVariables(object[prop], variables);\n    }\n  }\n\n  return object;\n}\nexport function getKeyValyeByString(object, match) {\n  const path = match.split('.');\n  return getKeyValueByPath(object, path);\n}\nexport function getKeyValueByPath(object, path) {\n  const nextPath = path.shift();\n\n  if (!object) {\n    return undefined;\n  }\n\n  if (typeof object[nextPath] === 'object') {\n    return getKeyValueByPath(object[nextPath], path);\n  } else {\n    return object[nextPath] || undefined;\n  }\n}","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/utils/object.ts"],"names":["replaceVariables","filterKeys","obj1","obj2","filterMap","merged","filtered","Object","keys","forEach","key","includes","deserialize","json","instance","prop","Array","isArray","replaceObjectVariables","object","variables","constructor","map","propValue","getKeyValyeByString","match","path","split","getKeyValueByPath","nextPath","shift","undefined"],"mappings":"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","sourcesContent":["import { replaceVariables } from 'utils/string';\n\nexport function filterKeys(obj1 = {}, obj2 = {}, filterMap = []): any {\n    const merged = { ...obj1, ...obj2 };\n    const filtered = {};\n\n    Object.keys(merged).forEach(key => {\n        if (filterMap.includes(key)) {\n            filtered[key] = merged[key];\n        }\n    });\n\n    return filtered;\n}\n\n\nexport function deserialize(json: object): any {\n    const instance = { ...json };\n\n    for(const prop in json) {\n        if(!json[prop]) {\n            instance[prop] = json[prop];\n        }\n\n        if(Array.isArray(json[prop])) {\n            instance[prop] = json[prop];\n        } else if(typeof json[prop] === 'object') {\n            instance[prop] = deserialize(json[prop]);\n        } else {\n            instance[prop] = json[prop];\n        }\n    }\n    \n    return instance;\n}\n\nexport function replaceObjectVariables(object: object, variables: object):any {\n    if(typeof object === 'string') {\n        return replaceVariables(object, variables);\n    }\n\n    if (!object || object.constructor !== Object) {\n        return object;\n    }\n\n    for(const prop in object) {\n        if(!object[prop]) {\n            continue;\n        }\n\n        if(Array.isArray(object[prop])) {\n            object[prop] =  object[prop].map(propValue => replaceObjectVariables(propValue, variables));\n        } else if(typeof object[prop] === 'object') {\n            object[prop] = replaceObjectVariables(object[prop], variables);\n        } else if(typeof object[prop] === 'string') {\n            object[prop] = replaceVariables(object[prop], variables);\n        }\n    }\n\n    return object;\n}\n\nexport function getKeyValyeByString(object: object, match: string): any {\n    const path = match.split('.');\n    return getKeyValueByPath(object, path);\n}\n\nexport function getKeyValueByPath(object: object, path: string[]): any {\n    const nextPath = path.shift();\n\n    if(!object) {\n        return undefined;\n    }\n\n    if(typeof object[nextPath] === 'object') {\n        return getKeyValueByPath(object[nextPath], path);\n    } else {\n        return object[nextPath] || undefined;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}