{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport getConfig from 'next/config';\nimport Rollbar from 'rollbar';\nlet instance;\nexport default instance ? instance : init();\nexport function init(payload = {}) {\n  if (instance) {\n    return instance;\n  } else {\n    const {\n      serverRuntimeConfig,\n      publicRuntimeConfig\n    } = getConfig();\n    return instance = new Rollbar({\n      accessToken: false ? publicRuntimeConfig.ROLLBAR_CLIENT_KEY : serverRuntimeConfig.ROLLBAR_SERVER_KEY,\n      environment: process.env.APP_ENV,\n      autoInstrument: {\n        log: false\n      },\n      verbose: process.env.APP_ENV === 'development',\n      payload: _objectSpread({}, payload)\n    });\n  }\n}","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/services/Rollbar.ts"],"names":["getConfig","Rollbar","instance","init","payload","serverRuntimeConfig","publicRuntimeConfig","accessToken","ROLLBAR_CLIENT_KEY","ROLLBAR_SERVER_KEY","environment","process","env","APP_ENV","autoInstrument","log","verbose"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,IAAIC,QAAJ;AACA,eAAeA,QAAQ,GAAGA,QAAH,GAAcC,IAAI,EAAzC;AACA,OAAO,SAASA,IAAT,CAAcC,OAAe,GAAG,EAAhC,EAAyC;AAC5C,MAAIF,QAAJ,EAAc;AACV,WAAOA,QAAP;AACH,GAFD,MAEO;AACH,UAAM;AAAEG,MAAAA,mBAAF;AAAuBC,MAAAA;AAAvB,QAA+CN,SAAS,EAA9D;AAEA,WAAOE,QAAQ,GAAG,IAAID,OAAJ,CAAY;AAC1BM,MAAAA,WAAW,EAAE,QACPD,mBAAmB,CAACE,kBADb,GAEPH,mBAAmB,CAACI,kBAHA;AAI1BC,MAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,OAJC;AAK1BC,MAAAA,cAAc,EAAE;AAAEC,QAAAA,GAAG,EAAE;AAAP,OALU;AAM1BC,MAAAA,OAAO,EAAEL,OAAO,CAACC,GAAR,CAAYC,OAAZ,KAAwB,aANP;AAO1BT,MAAAA,OAAO,oBACAA,OADA;AAPmB,KAAZ,CAAlB;AAWH;AACJ","sourcesContent":["import getConfig from 'next/config';\nimport Rollbar from 'rollbar';\n\nlet instance;\nexport default instance ? instance : init();\nexport function init(payload: object = {}): any {\n    if (instance) {\n        return instance;\n    } else {\n        const { serverRuntimeConfig, publicRuntimeConfig } = getConfig();\n\n        return instance = new Rollbar({\n            accessToken: process.browser\n                ? publicRuntimeConfig.ROLLBAR_CLIENT_KEY\n                : serverRuntimeConfig.ROLLBAR_SERVER_KEY,\n            environment: process.env.APP_ENV,\n            autoInstrument: { log: false },\n            verbose: process.env.APP_ENV === 'development',\n            payload: {\n                ...payload,\n            },\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}