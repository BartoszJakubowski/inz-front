{"ast":null,"code":"import { DIACRITICS_MAP } from 'consts/strings';\nimport { parseToQueryString } from 'utils/querystring';\nimport { getKeyValyeByString } from 'utils/object';\nexport function shorten(string, length, addDots = false) {\n  if (!string || typeof string !== 'string') {\n    return '';\n  }\n\n  let newString = string.substring(0, length);\n  if (string.length > length && addDots) newString = newString + '...';\n  return newString;\n}\nexport function withVariables(string, variables = {}, queryObject = {}, hash = '') {\n  if (!string || typeof string !== 'string') {\n    return '';\n  }\n\n  Object.keys(variables).forEach(variableKey => {\n    const pattern = ':variableKey'.replace('variableKey', variableKey);\n    string = string.replace(pattern, variables[variableKey]);\n  });\n  Object.keys(variables).forEach(variableKey => {\n    const pattern = '[variableKey]'.replace('variableKey', variableKey);\n    string = string.replace(pattern, variables[variableKey]);\n  });\n  string = string.replace('(', '').replace(')', '');\n  return parseToQueryString(string, queryObject) + hash;\n}\nexport function isJsonString(jsonString) {\n  try {\n    const o = JSON.parse(jsonString);\n\n    if (o && typeof o === 'object') {\n      return o;\n    }\n  } catch (e) {// Ignore\n  }\n\n  return false;\n}\nexport function slugify(text) {\n  text = (text || '').toString().toLowerCase();\n  text = removeDiacritics(text);\n  return text.replace(/\\s+/g, '-') // Replace spaces with -\n  .replace(/[^\\w-]+/g, '') // Remove all non-word chars\n  .replace(/--+/g, '-') // Replace multiple - with single -\n  .replace(/^-+/, '') // Trim - from start of text\n  .replace(/-+$/, ''); // Trim - from end of text\n}\nexport function removeDiacritics(text) {\n  for (let i = 0; i < DIACRITICS_MAP.length; i++) {\n    text = text.replace(DIACRITICS_MAP[i].letters, DIACRITICS_MAP[i].base);\n  }\n\n  return text;\n}\nexport function replaceVariables(string, values) {\n  const regexp = new RegExp('{{.+?}}', 'g');\n  const matches = string.match(regexp);\n\n  if (!Array.isArray(matches)) {\n    return string;\n  }\n\n  matches.forEach(match => {\n    let path = match.match(/\\{\\{(.*)\\}\\}/g)[0];\n    path = path.replace('{', '').replace('{', '').replace('}', '').replace('}', '');\n    let value = getKeyValyeByString(values, path);\n\n    if (typeof value === 'undefined') {\n      console.error(`Can't find value for variable ${match} at path ${path}`);\n      value = '';\n    }\n\n    string = string.replace(match, value);\n  });\n  return string;\n}","map":null,"metadata":{},"sourceType":"module"}