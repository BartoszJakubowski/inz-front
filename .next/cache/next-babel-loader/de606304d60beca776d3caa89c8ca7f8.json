{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Specialization from 'models/Specialization';\nexport let Types;\n\n(function (Types) {\n  Types[\"Primary\"] = \"type_primary\";\n  Types[\"Secondary\"] = \"type_secondary\";\n})(Types || (Types = {}));\n\nexport default class UserSpecialization {\n  constructor(data) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"specializationId\", void 0);\n\n    _defineProperty(this, \"userId\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"typeOption\", void 0);\n\n    _defineProperty(this, \"specialization\", void 0);\n\n    _defineProperty(this, \"getType\", type => {\n      if (type) {\n        if (type === Types.Primary) {\n          return Types.Primary;\n        }\n\n        return Types.Secondary;\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getTypeOption\", type => {\n      return typeOptions.find(option => option.value === type) || null;\n    });\n\n    this.id = data.id;\n    this.specializationId = data.specializationId;\n    this.userId = data.userId;\n    this.type = this.getType(data.type);\n    this.typeOption = this.getTypeOption(data.type);\n    this.specialization = data.specialization && new Specialization(data.specialization) || null;\n  }\n\n}\nexport const typeOptions = [{\n  value: Types.Primary,\n  label: 'Główna'\n}, {\n  value: Types.Secondary,\n  label: 'Poboczna'\n}];","map":null,"metadata":{},"sourceType":"module"}