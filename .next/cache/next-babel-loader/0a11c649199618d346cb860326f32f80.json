{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport qs from 'qs';\nimport { isJsonString } from 'utils/string';\nexport function parseQueryToObject(queryString = '', jsonToValue = false) {\n  if (!queryString.includes('?')) {\n    queryString = '';\n  }\n\n  const queryStringArray = queryString.split('?');\n  queryString = queryStringArray[queryStringArray.length - 1];\n  const queryObject = qs.parse(queryString.replace('?', ''));\n\n  if (jsonToValue) {\n    Object.keys(queryObject).forEach(key => {\n      try {\n        if (isJsonString(queryObject[key])) {\n          queryObject[key] = JSON.parse(queryObject[key]).value;\n        }\n      } catch (error) {// Ignore\n      }\n    });\n  }\n\n  return queryObject;\n}\nexport function parseToQueryString(url, params = {}) {\n  const urlParts = url.split('?');\n  const urlPath = urlParts[0];\n  const urlParams = typeof urlParts[1] !== 'undefined' ? qs.parse(urlParts[1]) : {};\n  params = _objectSpread(_objectSpread({}, urlParams), params);\n  return `${urlPath}?${qs.stringify(params)}`.replace(/\\?+$/, ''); // Replace all \"?\" chars at the of string\n}\nexport function filterParams(params = {}, filter = []) {\n  const filteredParams = {};\n  Object.keys(params).forEach(paramName => {\n    if (!filter.includes(paramName)) {\n      filteredParams[paramName] = params[paramName];\n    }\n  });\n  return filteredParams;\n}","map":null,"metadata":{},"sourceType":"module"}