{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// @ts-ignore\nimport classnames from 'classnames';\nimport { ButtonElements, ButtonIconTypes } from './index';\nimport StyledComponent from './styles';\nimport Spinner, { Colors, Positions } from 'components/layout/Spinner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LayoutButton = function LayoutButton(_ref) {\n  var children = _ref.children,\n      href = _ref.href,\n      onClick = _ref.onClick,\n      type = _ref.type,\n      element = _ref.element,\n      className = _ref.className,\n      icon = _ref.icon,\n      disabled = _ref.disabled,\n      size = _ref.size,\n      style = _ref.style,\n      variant = _ref.variant,\n      layout = _ref.layout,\n      loading = _ref.loading,\n      confirm = _ref.confirm,\n      buttonProps = _ref.buttonProps,\n      shadow = _ref.shadow,\n      selected = _ref.selected;\n  var defaultConfirmProps = {\n    message: 'Potwierdź swój wybór'\n  };\n\n  var onCheckClick = function onCheckClick() {\n    if (disabled) {\n      return;\n    }\n\n    if (confirm !== null && confirm !== void 0 && confirm.enabled) {\n      var confirmConfig = _objectSpread(_objectSpread({}, defaultConfirmProps), confirm);\n\n      if (window.confirm(confirmConfig.message)) {\n        return onClick && onClick();\n      } else {\n        return null;\n      }\n    }\n\n    return onClick && onClick();\n  };\n\n  var getIcon = function getIcon() {\n    if (!icon) return null;\n\n    if (icon.type === ButtonIconTypes.Element) {\n      return icon.value || null;\n    }\n\n    if (icon.type === ButtonIconTypes.Image) {\n      return /*#__PURE__*/_jsx(\"img\", {\n        className: \"button-icon-image\",\n        src: icon.value\n      });\n    }\n\n    return null;\n  };\n\n  var getContent = function getContent() {\n    return loading ? /*#__PURE__*/_jsx(Spinner, {\n      color: Colors.White,\n      position: Positions.Relative\n    }) : /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        className: \"button-content\",\n        children: children\n      }), icon && /*#__PURE__*/_jsx(\"div\", {\n        className: \"button-icon\",\n        children: getIcon()\n      })]\n    });\n  };\n\n  var getElement = function getElement() {\n    var button = /*#__PURE__*/_jsx(\"button\", _objectSpread(_objectSpread({\n      type: type,\n      onClick: onCheckClick,\n      disabled: disabled,\n      className: \"button\"\n    }, buttonProps), {}, {\n      children: getContent()\n    }));\n\n    switch (element) {\n      case ButtonElements.Anchor:\n        return /*#__PURE__*/_jsx(\"a\", _objectSpread(_objectSpread({\n          href: href\n        }, buttonProps), {}, {\n          children: button\n        }));\n\n      default:\n        return button;\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(StyledComponent, {\n    className: classnames('layout-button', className, \"element-\".concat(element), \"size-\".concat(size), \"style-\".concat(style), \"variant-\".concat(variant), \"layout-\".concat(layout), {\n      disabled: disabled,\n      shadow: shadow === null || shadow === void 0 ? void 0 : shadow.enabled,\n      selected: selected\n    }),\n    children: [getElement(), (shadow === null || shadow === void 0 ? void 0 : shadow.enabled) && /*#__PURE__*/_jsx(\"div\", {\n      className: \"button-shadow\",\n      style: shadow.style || {}\n    })]\n  });\n};\n\nexport default LayoutButton;","map":null,"metadata":{},"sourceType":"module"}