{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport * as types from './types';\nimport { INIT_FLAG, SUCCESS_FLAG, FAIL_FLAG, ELEMENT_MARKUP } from 'consts/redux';\nimport { API_RESOURCE_PRODUCT } from 'consts/apiResources';\nimport Product from 'models/Product';\nexport const initialState = {\n  mapById: {}\n};\nexport default function ProductReducer(state = initialState, action) {\n  switch (action.type) {\n    case HYDRATE:\n      // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case types.SINGLE + '_' + INIT_FLAG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mapById: _objectSpread(_objectSpread({}, state.mapById), {}, {\n          [action.params.id]: _objectSpread(_objectSpread(_objectSpread({}, ELEMENT_MARKUP), state.mapById[action.params.id] || {}), {}, {\n            isLoading: true,\n            isLoaded: false\n          })\n        })\n      });\n\n    case types.SINGLE + '_' + SUCCESS_FLAG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mapById: _objectSpread(_objectSpread({}, state.mapById), {}, {\n          [action.params.id]: _objectSpread(_objectSpread(_objectSpread({}, ELEMENT_MARKUP), state.mapById[action.params.id] || {}), {}, {\n            isLoading: false,\n            isLoaded: true,\n            data: new Product(action.payload.data[API_RESOURCE_PRODUCT]),\n            error: false\n          })\n        })\n      });\n\n    case types.SINGLE + '_' + FAIL_FLAG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mapById: _objectSpread(_objectSpread({}, state.mapById), {}, {\n          [action.params.id]: _objectSpread(_objectSpread(_objectSpread({}, ELEMENT_MARKUP), state.mapById[action.params.id] || {}), {}, {\n            isLoading: false,\n            isLoaded: true,\n            data: null,\n            error: true\n          })\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}