{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport let Types;\n\n(function (Types) {\n  Types[\"Gym\"] = \"gym\";\n  Types[\"Online\"] = \"online\";\n  Types[\"Outside\"] = \"outside\";\n  Types[\"Home\"] = \"home\";\n  Types[\"Office\"] = \"office\";\n  Types[\"DoctorOffice\"] = \"doctorOffice\";\n  Types[\"MassageOffice\"] = \"massageOffice\";\n})(Types || (Types = {}));\n\nexport default class Location {\n  constructor(data) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"slug\", void 0);\n\n    _defineProperty(this, \"city\", void 0);\n\n    _defineProperty(this, \"address\", void 0);\n\n    _defineProperty(this, \"typeOption\", void 0);\n\n    _defineProperty(this, \"getType\", type => {\n      if (type === Types.Gym) {\n        return Types.Gym;\n      }\n\n      if (type === Types.Online) {\n        return Types.Online;\n      }\n\n      if (type === Types.Outside) {\n        return Types.Outside;\n      }\n\n      if (type === Types.Home) {\n        return Types.Home;\n      }\n\n      if (type === Types.Office) {\n        return Types.Office;\n      }\n\n      if (type === Types.DoctorOffice) {\n        return Types.DoctorOffice;\n      }\n\n      if (type === Types.MassageOffice) {\n        return Types.MassageOffice;\n      }\n    });\n\n    _defineProperty(this, \"getTypeOption\", type => {\n      return typeOptions.find(option => option.value === type) || null;\n    });\n\n    this.id = data.id;\n    this.type = this.getType(this.type);\n    this.name = data.name;\n    this.slug = data.slug;\n    this.city = data.city;\n    this.address = data.address;\n    this.typeOption = this.getTypeOption(this.type);\n  }\n\n}\nexport const typeOptions = [{\n  value: Types.Gym,\n  label: 'Siłownia'\n}, {\n  value: Types.Online,\n  label: 'Online'\n}, {\n  value: Types.Outside,\n  label: 'Plener'\n}, {\n  value: Types.Home,\n  label: 'Dom klienta'\n}, {\n  value: Types.Office,\n  label: 'Biuro'\n}, {\n  value: Types.DoctorOffice,\n  label: 'Gabinet lekarski'\n}, {\n  value: Types.MassageOffice,\n  label: 'Gabinet masażu'\n}];","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/models/Location.ts"],"names":["Types","Location","constructor","data","type","Gym","Online","Outside","Home","Office","DoctorOffice","MassageOffice","typeOptions","find","option","value","id","getType","name","slug","city","address","typeOption","getTypeOption","label"],"mappings":";;AAKA,WAAYA,KAAZ;;WAAYA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;GAAAA,K,KAAAA,K;;AAUZ,eAAe,MAAMC,QAAN,CAAgC;AAS3CC,EAAAA,WAAW,CAACC,IAAD,EAAoB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,qCAUpBC,IAAD,IAAwB;AAC9B,UAAGA,IAAI,KAAKJ,KAAK,CAACK,GAAlB,EAAuB;AACnB,eAAOL,KAAK,CAACK,GAAb;AACH;;AAED,UAAGD,IAAI,KAAKJ,KAAK,CAACM,MAAlB,EAA0B;AACtB,eAAON,KAAK,CAACM,MAAb;AACH;;AAED,UAAGF,IAAI,KAAKJ,KAAK,CAACO,OAAlB,EAA2B;AACvB,eAAOP,KAAK,CAACO,OAAb;AACH;;AAED,UAAGH,IAAI,KAAKJ,KAAK,CAACQ,IAAlB,EAAwB;AACpB,eAAOR,KAAK,CAACQ,IAAb;AACH;;AAED,UAAGJ,IAAI,KAAKJ,KAAK,CAACS,MAAlB,EAA0B;AACtB,eAAOT,KAAK,CAACS,MAAb;AACH;;AAED,UAAGL,IAAI,KAAKJ,KAAK,CAACU,YAAlB,EAAgC;AAC5B,eAAOV,KAAK,CAACU,YAAb;AACH;;AAED,UAAGN,IAAI,KAAKJ,KAAK,CAACW,aAAlB,EAAiC;AAC7B,eAAOX,KAAK,CAACW,aAAb;AACH;AACJ,KAtC8B;;AAAA,2CAwCdP,IAAD,IAAgC;AAC5C,aAAOQ,WAAW,CAACC,IAAZ,CAAiBC,MAAM,IAAIA,MAAM,CAACC,KAAP,KAAiBX,IAA5C,KAAqD,IAA5D;AACH,KA1C8B;;AAC3B,SAAKY,EAAL,GAAUb,IAAI,CAACa,EAAf;AACA,SAAKZ,IAAL,GAAa,KAAKa,OAAL,CAAa,KAAKb,IAAlB,CAAb;AACA,SAAKc,IAAL,GAAYf,IAAI,CAACe,IAAjB;AACA,SAAKC,IAAL,GAAYhB,IAAI,CAACgB,IAAjB;AACA,SAAKC,IAAL,GAAYjB,IAAI,CAACiB,IAAjB;AACA,SAAKC,OAAL,GAAelB,IAAI,CAACkB,OAApB;AACA,SAAKC,UAAL,GAAkB,KAAKC,aAAL,CAAmB,KAAKnB,IAAxB,CAAlB;AACH;;AAjB0C;AAsD/C,OAAO,MAAMQ,WAA4B,GAAG,CAAC;AACzCG,EAAAA,KAAK,EAAEf,KAAK,CAACK,GAD4B;AAEzCmB,EAAAA,KAAK,EAAE;AAFkC,CAAD,EAGzC;AACCT,EAAAA,KAAK,EAAEf,KAAK,CAACM,MADd;AAECkB,EAAAA,KAAK,EAAE;AAFR,CAHyC,EAMzC;AACCT,EAAAA,KAAK,EAAEf,KAAK,CAACO,OADd;AAECiB,EAAAA,KAAK,EAAE;AAFR,CANyC,EASzC;AACCT,EAAAA,KAAK,EAAEf,KAAK,CAACQ,IADd;AAECgB,EAAAA,KAAK,EAAE;AAFR,CATyC,EAYzC;AACCT,EAAAA,KAAK,EAAEf,KAAK,CAACS,MADd;AAECe,EAAAA,KAAK,EAAE;AAFR,CAZyC,EAezC;AACCT,EAAAA,KAAK,EAAEf,KAAK,CAACU,YADd;AAECc,EAAAA,KAAK,EAAE;AAFR,CAfyC,EAkBzC;AACCT,EAAAA,KAAK,EAAEf,KAAK,CAACW,aADd;AAECa,EAAAA,KAAK,EAAE;AAFR,CAlByC,CAArC","sourcesContent":["import Model from 'models/Model';\n\nimport ApiLocation from 'types/api/Location';\nimport { Option } from 'types/options';\n\nexport enum Types {\n    Gym = 'gym',\n    Online = 'online',\n    Outside = 'outside',\n    Home = 'home',\n    Office = 'office',\n    DoctorOffice = 'doctorOffice',\n    MassageOffice = 'massageOffice',\n}\n\nexport default class Location implements Model {\n    id: string;\n    type: Types;\n    name: string;\n    slug: string;\n    city: string;\n    address: string;\n    typeOption: Option<Types>;\n\n    constructor(data: ApiLocation) {\n        this.id = data.id;\n        this.type =  this.getType(this.type);\n        this.name = data.name;\n        this.slug = data.slug;\n        this.city = data.city;\n        this.address = data.address;\n        this.typeOption = this.getTypeOption(this.type);\n    }\n\n    getType = (type: Types): Types => {\n        if(type === Types.Gym) {\n            return Types.Gym;\n        }\n\n        if(type === Types.Online) {\n            return Types.Online;\n        }\n\n        if(type === Types.Outside) {\n            return Types.Outside;\n        }\n\n        if(type === Types.Home) {\n            return Types.Home;\n        }\n\n        if(type === Types.Office) {\n            return Types.Office;\n        }\n\n        if(type === Types.DoctorOffice) {\n            return Types.DoctorOffice;\n        }\n\n        if(type === Types.MassageOffice) {\n            return Types.MassageOffice;\n        }\n    }\n\n    getTypeOption = (type: Types): Option<Types> => {\n        return typeOptions.find(option => option.value === type) || null;\n    }\n}\n\nexport const typeOptions: Option<Types>[] = [{\n    value: Types.Gym,\n    label: 'Siłownia',\n}, {\n    value: Types.Online,\n    label: 'Online',\n}, {\n    value: Types.Outside,\n    label: 'Plener',\n}, {\n    value: Types.Home,\n    label: 'Dom klienta',\n}, {\n    value: Types.Office,\n    label: 'Biuro',\n}, {\n    value: Types.DoctorOffice,\n    label: 'Gabinet lekarski',\n}, {\n    value: Types.MassageOffice,\n    label: 'Gabinet masażu',\n}]"]},"metadata":{},"sourceType":"module"}