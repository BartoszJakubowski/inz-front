{"ast":null,"code":"import { connect } from 'formik';\nimport Component from './component';\nimport { ValidationActions } from 'components/layout/forms/InputWrapper';\nexport let InputStyles;\n\n(function (InputStyles) {\n  InputStyles[\"Primary\"] = \"primary\";\n  InputStyles[\"Light\"] = \"light\";\n})(InputStyles || (InputStyles = {}));\n\nComponent.defaultProps = {\n  type: 'text',\n  placeholder: null,\n  value: '',\n  style: InputStyles.Primary,\n  styles: {},\n  error: null,\n  disabled: false,\n  validationAction: ValidationActions.Decorator,\n  decoratorLeft: null,\n  decoratorRight: null,\n  inputProps: {},\n  required: false\n};\nexport default connect(Component);","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/components/layout/forms/Input/index.ts"],"names":["connect","Component","ValidationActions","InputStyles","defaultProps","type","placeholder","value","style","Primary","styles","error","disabled","validationAction","Decorator","decoratorLeft","decoratorRight","inputProps","required"],"mappings":"AACA,SAASA,OAAT,QAA2C,QAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAGIC,iBAHJ,QAIO,sCAJP;AAmCA,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAKZF,SAAS,CAACG,YAAV,GAAyB;AACrBC,EAAAA,IAAI,EAAE,MADe;AAErBC,EAAAA,WAAW,EAAE,IAFQ;AAGrBC,EAAAA,KAAK,EAAE,EAHc;AAIrBC,EAAAA,KAAK,EAAEL,WAAW,CAACM,OAJE;AAKrBC,EAAAA,MAAM,EAAE,EALa;AAMrBC,EAAAA,KAAK,EAAE,IANc;AAOrBC,EAAAA,QAAQ,EAAE,KAPW;AAQrBC,EAAAA,gBAAgB,EAAEX,iBAAiB,CAACY,SARf;AASrBC,EAAAA,aAAa,EAAE,IATM;AAUrBC,EAAAA,cAAc,EAAE,IAVK;AAWrBC,EAAAA,UAAU,EAAE,EAXS;AAYrBC,EAAAA,QAAQ,EAAE;AAZW,CAAzB;AAeA,eAAelB,OAAO,CAACC,SAAD,CAAtB","sourcesContent":["import { ChangeEvent } from 'react';\nimport { connect, FormikContextType } from 'formik';\nimport Component from './component';\n\nimport {\n    Props as InputWrapperProps,\n    InputDecorator,\n    ValidationActions,\n} from 'components/layout/forms/InputWrapper';\n\n\nexport interface Props extends InputWrapperProps {\n    formik?: FormikContextType<any>;\n    name: string;\n    type?: string;\n    placeholder?: string;\n    value?: string | number;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => any;\n    style?: InputStyles;\n    styles?: object;\n    error?: string;\n    disabled?: boolean;\n    validationAction?: ValidationActions;\n    decoratorLeft?: InputDecorator;\n    decoratorRight?: InputDecorator;\n    spinButtons?: InputSpinButtons;\n    inputProps?: {\n        min?: number;\n        max?: number;\n    }\n    required?: boolean;\n}\n\nexport interface InputSpinButtons {\n    visible: boolean;\n    onIncrement?: (nextValue: number) => void;\n    onDecrement?: (nextValue: number) => void;\n}\n\nexport enum InputStyles {\n    Primary = 'primary',\n    Light = 'light',\n}\n\nComponent.defaultProps = {\n    type: 'text',\n    placeholder: null,\n    value: '',\n    style: InputStyles.Primary,\n    styles: {},\n    error: null,\n    disabled: false,\n    validationAction: ValidationActions.Decorator,\n    decoratorLeft: null,\n    decoratorRight: null,\n    inputProps: {},\n    required: false,\n};\n\nexport default connect(Component);"]},"metadata":{},"sourceType":"module"}