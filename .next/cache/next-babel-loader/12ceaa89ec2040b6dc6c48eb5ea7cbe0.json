{"ast":null,"code":"import { DIACRITICS_MAP } from 'consts/strings';\nimport { parseToQueryString } from 'utils/querystring';\nimport { getKeyValyeByString } from 'utils/object';\nexport function shorten(string, length) {\n  var addDots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!string || typeof string !== 'string') {\n    return '';\n  }\n\n  var newString = string.substring(0, length);\n  if (string.length > length && addDots) newString = newString + '...';\n  return newString;\n}\nexport function withVariables(string) {\n  var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var queryObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var hash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n  if (!string || typeof string !== 'string') {\n    return '';\n  }\n\n  Object.keys(variables).forEach(function (variableKey) {\n    var pattern = ':variableKey'.replace('variableKey', variableKey);\n    string = string.replace(pattern, variables[variableKey]);\n  });\n  Object.keys(variables).forEach(function (variableKey) {\n    var pattern = '[variableKey]'.replace('variableKey', variableKey);\n    string = string.replace(pattern, variables[variableKey]);\n  });\n  string = string.replace('(', '').replace(')', '');\n  return parseToQueryString(string, queryObject) + hash;\n}\nexport function isJsonString(jsonString) {\n  try {\n    var o = JSON.parse(jsonString);\n\n    if (o && typeof o === 'object') {\n      return o;\n    }\n  } catch (e) {// Ignore\n  }\n\n  return false;\n}\nexport function slugify(text) {\n  text = (text || '').toString().toLowerCase();\n  text = removeDiacritics(text);\n  return text.replace(/\\s+/g, '-') // Replace spaces with -\n  .replace(/[^\\w-]+/g, '') // Remove all non-word chars\n  .replace(/--+/g, '-') // Replace multiple - with single -\n  .replace(/^-+/, '') // Trim - from start of text\n  .replace(/-+$/, ''); // Trim - from end of text\n}\nexport function removeDiacritics(text) {\n  for (var i = 0; i < DIACRITICS_MAP.length; i++) {\n    text = text.replace(DIACRITICS_MAP[i].letters, DIACRITICS_MAP[i].base);\n  }\n\n  return text;\n}\nexport function replaceVariables(string, values) {\n  var regexp = new RegExp('{{.+?}}', 'g');\n  var matches = string.match(regexp);\n\n  if (!Array.isArray(matches)) {\n    return string;\n  }\n\n  matches.forEach(function (match) {\n    var path = match.match(/\\{\\{(.*)\\}\\}/g)[0];\n    path = path.replace('{', '').replace('{', '').replace('}', '').replace('}', '');\n    var value = getKeyValyeByString(values, path);\n\n    if (typeof value === 'undefined') {\n      console.error(\"Can't find value for variable \".concat(match, \" at path \").concat(path));\n      value = '';\n    }\n\n    string = string.replace(match, value);\n  });\n  return string;\n}","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/utils/string.ts"],"names":["DIACRITICS_MAP","parseToQueryString","getKeyValyeByString","shorten","string","length","addDots","newString","substring","withVariables","variables","queryObject","hash","Object","keys","forEach","variableKey","pattern","replace","isJsonString","jsonString","o","JSON","parse","e","slugify","text","toString","toLowerCase","removeDiacritics","i","letters","base","replaceVariables","values","regexp","RegExp","matches","match","Array","isArray","path","value","console","error"],"mappings":"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","sourcesContent":["import { DIACRITICS_MAP } from 'consts/strings';\n\nimport { parseToQueryString } from 'utils/querystring';\nimport { getKeyValyeByString } from 'utils/object';\n\nexport function shorten(string: string, length: number, addDots = false): string {\n    if (!string || typeof string !== 'string') {\n        return '';\n    }\n\n    let newString = string.substring(0, length);\n    if (string.length > length && addDots) newString = newString + '...';\n\n    return newString;\n}\n\nexport function withVariables(string: string, variables = {}, queryObject = {}, hash = ''): string {\n    if (!string || typeof string !== 'string') {\n        return '';\n    }\n\n    Object.keys(variables)\n        .forEach(variableKey => {\n            const pattern = ':variableKey'.replace('variableKey', variableKey);\n\n            string = string.replace(pattern, variables[variableKey]);\n        });\n\n    Object.keys(variables)\n        .forEach(variableKey => {\n            const pattern = '[variableKey]'.replace('variableKey', variableKey);\n\n            string = string.replace(pattern, variables[variableKey]);\n        });\n\n    string = string\n        .replace('(', '')\n        .replace(')', '');\n\n    return parseToQueryString(string, queryObject) + hash;\n}\n\n\nexport function isJsonString(jsonString: string): boolean {\n    try {\n        const o = JSON.parse(jsonString);\n        if (o && typeof o === 'object') {\n            return o;\n        }\n    }\n    catch (e) {\n        // Ignore\n    }\n\n    return false;\n}\n\nexport function slugify(text: string): string {\n    text = (text || '')\n        .toString()\n        .toLowerCase();\n    text = removeDiacritics(text);\n\n    return text\n        .replace(/\\s+/g, '-')           // Replace spaces with -\n        .replace(/[^\\w-]+/g, '')       // Remove all non-word chars\n        .replace(/--+/g, '-')         // Replace multiple - with single -\n        .replace(/^-+/, '')             // Trim - from start of text\n        .replace(/-+$/, '');            // Trim - from end of text\n}\n\nexport function removeDiacritics(text: string): string {\n    for (let i = 0; i < DIACRITICS_MAP.length; i++) {\n        text = text.replace(DIACRITICS_MAP[i].letters, DIACRITICS_MAP[i].base);\n    }\n\n    return text;\n}\n\nexport function replaceVariables(string: string, values: object): string {\n    const regexp = new RegExp('{{.+?}}', 'g');\n    const matches = string.match(regexp);\n\n    if(!Array.isArray(matches)) {\n        return string;\n    }\n\n    matches.forEach(match => {\n        let path = match.match(/\\{\\{(.*)\\}\\}/g)[0];\n        path = path\n            .replace('{','')\n            .replace('{','')\n            .replace('}','')\n            .replace('}','');\n\n        let value = getKeyValyeByString(values, path);\n\n        if(typeof value === 'undefined') {\n            console.error(`Can't find value for variable ${match} at path ${path}`);\n            value = '';\n        }\n\n        string = string.replace(match, value)\n    });\n\n    return string;\n}"]},"metadata":{},"sourceType":"module"}