{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport * as types from './types';\nimport { INIT_FLAG, SUCCESS_FLAG, FAIL_FLAG, LIST_MARKUP } from 'consts/redux';\nimport { API_RESOURCE_EVENTS_FREE_SLOTS_BY_SCORE } from 'consts/apiResources';\nexport const initialState = {\n  list: LIST_MARKUP\n};\nexport default function EventsReducer(state = initialState, action) {\n  switch (action.type) {\n    case HYDRATE:\n      // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case types.FREE_SLOTS_BY_SCORE + '_' + INIT_FLAG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread(_objectSpread({}, LIST_MARKUP), state.list), {}, {\n          params: action.params,\n          isLoading: true,\n          isLoaded: false\n        })\n      });\n\n    case types.FREE_SLOTS_BY_SCORE + '_' + SUCCESS_FLAG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread(_objectSpread({}, LIST_MARKUP), state.list), {}, {\n          isLoading: false,\n          isLoaded: true,\n          elements: action.payload.data[API_RESOURCE_EVENTS_FREE_SLOTS_BY_SCORE],\n          meta: action.payload.data[API_RESOURCE_EVENTS_FREE_SLOTS_BY_SCORE].meta,\n          error: false\n        })\n      });\n\n    case types.FREE_SLOTS_BY_SCORE + '_' + FAIL_FLAG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread(_objectSpread({}, LIST_MARKUP), state.list), {}, {\n          isLoading: false,\n          isLoaded: true,\n          error: true\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/store/modules/events/reducer.ts"],"names":["HYDRATE","types","INIT_FLAG","SUCCESS_FLAG","FAIL_FLAG","LIST_MARKUP","API_RESOURCE_EVENTS_FREE_SLOTS_BY_SCORE","initialState","list","EventsReducer","state","action","type","payload","FREE_SLOTS_BY_SCORE","params","isLoading","isLoaded","elements","data","meta","error"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAGA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,SAAlC,EAA6DC,WAA7D,QAAgF,cAAhF;AAEA,SAASC,uCAAT,QAAwD,qBAAxD;AAWA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,IAAI,EAAEH;AADkB,CAArB;AAIP,eAAe,SAASI,aAAT,CAAuBC,KAAY,GAAGH,YAAtC,EAAoDI,MAApD,EAAsE;AACjF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,OAAL;AACI;AACA,6CAAYU,KAAZ,GAAsBC,MAAM,CAACE,OAA7B;;AAEA,SAAKZ,KAAK,CAACa,mBAAN,GAA4B,GAA5B,GAAkCZ,SAAvC;AACA,6CACOQ,KADP;AAEIF,QAAAA,IAAI,gDACGH,WADH,GAEGK,KAAK,CAACF,IAFT;AAGAO,UAAAA,MAAM,EAAEJ,MAAM,CAACI,MAHf;AAIAC,UAAAA,SAAS,EAAE,IAJX;AAKAC,UAAAA,QAAQ,EAAE;AALV;AAFR;;AAUJ,SAAKhB,KAAK,CAACa,mBAAN,GAA4B,GAA5B,GAAkCX,YAAvC;AACI,6CACOO,KADP;AAEIF,QAAAA,IAAI,gDACGH,WADH,GAEGK,KAAK,CAACF,IAFT;AAGAQ,UAAAA,SAAS,EAAE,KAHX;AAIAC,UAAAA,QAAQ,EAAE,IAJV;AAKAC,UAAAA,QAAQ,EAAEP,MAAM,CAACE,OAAP,CAAeM,IAAf,CAAoBb,uCAApB,CALV;AAMAc,UAAAA,IAAI,EAAET,MAAM,CAACE,OAAP,CAAeM,IAAf,CAAoBb,uCAApB,EAA6Dc,IANnE;AAOAC,UAAAA,KAAK,EAAE;AAPP;AAFR;;AAYJ,SAAKpB,KAAK,CAACa,mBAAN,GAA4B,GAA5B,GAAkCV,SAAvC;AACI,6CACOM,KADP;AAEIF,QAAAA,IAAI,gDACGH,WADH,GAEGK,KAAK,CAACF,IAFT;AAGAQ,UAAAA,SAAS,EAAE,KAHX;AAIAC,UAAAA,QAAQ,EAAE,IAJV;AAKAI,UAAAA,KAAK,EAAE;AALP;AAFR;;AAWJ;AACI,aAAOX,KAAP;AA1CR;AA4CH","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\n\nimport * as types from './types';\nimport ListCollection from 'types/redux/ListCollection';\n\nimport { INIT_FLAG, SUCCESS_FLAG, FAIL_FLAG, ELEMENT_MARKUP, LIST_MARKUP } from 'consts/redux';\n\nimport { API_RESOURCE_EVENTS_FREE_SLOTS_BY_SCORE } from 'consts/apiResources';\n\ninterface FreeSlot {\n    trainerId: string;\n    time: string;\n}\n\nexport interface State {\n    list: ListCollection<FreeSlot>;\n}\n\nexport const initialState = {\n    list: LIST_MARKUP,\n};\n\nexport default function EventsReducer(state: State = initialState, action: any): any {\n    switch (action.type) {\n        case HYDRATE:\n            // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n            return { ...state, ...action.payload };\n\n            case types.FREE_SLOTS_BY_SCORE + '_' + INIT_FLAG:\n            return {\n                ...state,\n                list: {\n                    ...LIST_MARKUP,\n                    ...state.list,\n                    params: action.params,\n                    isLoading: true,\n                    isLoaded: false,\n                },\n            };\n        case types.FREE_SLOTS_BY_SCORE + '_' + SUCCESS_FLAG:\n            return {\n                ...state,\n                list: {\n                    ...LIST_MARKUP,\n                    ...state.list,\n                    isLoading: false,\n                    isLoaded: true,\n                    elements: action.payload.data[API_RESOURCE_EVENTS_FREE_SLOTS_BY_SCORE],\n                    meta: action.payload.data[API_RESOURCE_EVENTS_FREE_SLOTS_BY_SCORE].meta,\n                    error: false,\n                },\n            };\n        case types.FREE_SLOTS_BY_SCORE + '_' + FAIL_FLAG:\n            return {\n                ...state,\n                list: {\n                    ...LIST_MARKUP,\n                    ...state.list,\n                    isLoading: false,\n                    isLoaded: true,\n                    error: true,\n                },\n            };\n\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}