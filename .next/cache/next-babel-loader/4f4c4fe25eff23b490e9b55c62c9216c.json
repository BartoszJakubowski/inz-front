{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport var Types;\n\n(function (Types) {\n  Types[\"Gym\"] = \"gym\";\n  Types[\"Online\"] = \"online\";\n  Types[\"Outside\"] = \"outside\";\n  Types[\"Home\"] = \"home\";\n  Types[\"Office\"] = \"office\";\n  Types[\"DoctorOffice\"] = \"doctorOffice\";\n  Types[\"MassageOffice\"] = \"massageOffice\";\n})(Types || (Types = {}));\n\nvar Location = function Location(data) {\n  _classCallCheck(this, Location);\n\n  _defineProperty(this, \"id\", void 0);\n\n  _defineProperty(this, \"type\", void 0);\n\n  _defineProperty(this, \"name\", void 0);\n\n  _defineProperty(this, \"slug\", void 0);\n\n  _defineProperty(this, \"city\", void 0);\n\n  _defineProperty(this, \"address\", void 0);\n\n  _defineProperty(this, \"typeOption\", void 0);\n\n  _defineProperty(this, \"getType\", function (type) {\n    if (type === Types.Gym) {\n      return Types.Gym;\n    }\n\n    if (type === Types.Online) {\n      return Types.Online;\n    }\n\n    if (type === Types.Outside) {\n      return Types.Outside;\n    }\n\n    if (type === Types.Home) {\n      return Types.Home;\n    }\n\n    if (type === Types.Office) {\n      return Types.Office;\n    }\n\n    if (type === Types.DoctorOffice) {\n      return Types.DoctorOffice;\n    }\n\n    if (type === Types.MassageOffice) {\n      return Types.MassageOffice;\n    }\n  });\n\n  _defineProperty(this, \"getTypeOption\", function (type) {\n    return typeOptions.find(function (option) {\n      return option.value === type;\n    }) || null;\n  });\n\n  this.id = data.id;\n  this.type = this.getType(this.type);\n  this.name = data.name;\n  this.slug = data.slug;\n  this.city = data.city;\n  this.address = data.address;\n  this.typeOption = this.getTypeOption(this.type);\n};\n\nexport { Location as default };\nexport var typeOptions = [{\n  value: Types.Gym,\n  label: 'Siłownia'\n}, {\n  value: Types.Online,\n  label: 'Online'\n}, {\n  value: Types.Outside,\n  label: 'Plener'\n}, {\n  value: Types.Home,\n  label: 'Dom klienta'\n}, {\n  value: Types.Office,\n  label: 'Biuro'\n}, {\n  value: Types.DoctorOffice,\n  label: 'Gabinet lekarski'\n}, {\n  value: Types.MassageOffice,\n  label: 'Gabinet masażu'\n}];","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/models/Location.ts"],"names":["Types","Location","data","type","Gym","Online","Outside","Home","Office","DoctorOffice","MassageOffice","typeOptions","find","option","value","id","getType","name","slug","city","address","typeOption","getTypeOption","label"],"mappings":";;AAKA,WAAYA,KAAZ;;WAAYA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;GAAAA,K,KAAAA,K;;IAUSC,Q,GASjB,kBAAYC,IAAZ,EAA+B;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,mCAUrB,UAACC,IAAD,EAAwB;AAC9B,QAAGA,IAAI,KAAKH,KAAK,CAACI,GAAlB,EAAuB;AACnB,aAAOJ,KAAK,CAACI,GAAb;AACH;;AAED,QAAGD,IAAI,KAAKH,KAAK,CAACK,MAAlB,EAA0B;AACtB,aAAOL,KAAK,CAACK,MAAb;AACH;;AAED,QAAGF,IAAI,KAAKH,KAAK,CAACM,OAAlB,EAA2B;AACvB,aAAON,KAAK,CAACM,OAAb;AACH;;AAED,QAAGH,IAAI,KAAKH,KAAK,CAACO,IAAlB,EAAwB;AACpB,aAAOP,KAAK,CAACO,IAAb;AACH;;AAED,QAAGJ,IAAI,KAAKH,KAAK,CAACQ,MAAlB,EAA0B;AACtB,aAAOR,KAAK,CAACQ,MAAb;AACH;;AAED,QAAGL,IAAI,KAAKH,KAAK,CAACS,YAAlB,EAAgC;AAC5B,aAAOT,KAAK,CAACS,YAAb;AACH;;AAED,QAAGN,IAAI,KAAKH,KAAK,CAACU,aAAlB,EAAiC;AAC7B,aAAOV,KAAK,CAACU,aAAb;AACH;AACJ,GAtC8B;;AAAA,yCAwCf,UAACP,IAAD,EAAgC;AAC5C,WAAOQ,WAAW,CAACC,IAAZ,CAAiB,UAAAC,MAAM;AAAA,aAAIA,MAAM,CAACC,KAAP,KAAiBX,IAArB;AAAA,KAAvB,KAAqD,IAA5D;AACH,GA1C8B;;AAC3B,OAAKY,EAAL,GAAUb,IAAI,CAACa,EAAf;AACA,OAAKZ,IAAL,GAAa,KAAKa,OAAL,CAAa,KAAKb,IAAlB,CAAb;AACA,OAAKc,IAAL,GAAYf,IAAI,CAACe,IAAjB;AACA,OAAKC,IAAL,GAAYhB,IAAI,CAACgB,IAAjB;AACA,OAAKC,IAAL,GAAYjB,IAAI,CAACiB,IAAjB;AACA,OAAKC,OAAL,GAAelB,IAAI,CAACkB,OAApB;AACA,OAAKC,UAAL,GAAkB,KAAKC,aAAL,CAAmB,KAAKnB,IAAxB,CAAlB;AACH,C;;SAjBgBF,Q;AAsDrB,OAAO,IAAMU,WAA4B,GAAG,CAAC;AACzCG,EAAAA,KAAK,EAAEd,KAAK,CAACI,GAD4B;AAEzCmB,EAAAA,KAAK,EAAE;AAFkC,CAAD,EAGzC;AACCT,EAAAA,KAAK,EAAEd,KAAK,CAACK,MADd;AAECkB,EAAAA,KAAK,EAAE;AAFR,CAHyC,EAMzC;AACCT,EAAAA,KAAK,EAAEd,KAAK,CAACM,OADd;AAECiB,EAAAA,KAAK,EAAE;AAFR,CANyC,EASzC;AACCT,EAAAA,KAAK,EAAEd,KAAK,CAACO,IADd;AAECgB,EAAAA,KAAK,EAAE;AAFR,CATyC,EAYzC;AACCT,EAAAA,KAAK,EAAEd,KAAK,CAACQ,MADd;AAECe,EAAAA,KAAK,EAAE;AAFR,CAZyC,EAezC;AACCT,EAAAA,KAAK,EAAEd,KAAK,CAACS,YADd;AAECc,EAAAA,KAAK,EAAE;AAFR,CAfyC,EAkBzC;AACCT,EAAAA,KAAK,EAAEd,KAAK,CAACU,aADd;AAECa,EAAAA,KAAK,EAAE;AAFR,CAlByC,CAArC","sourcesContent":["import Model from 'models/Model';\n\nimport ApiLocation from 'types/api/Location';\nimport { Option } from 'types/options';\n\nexport enum Types {\n    Gym = 'gym',\n    Online = 'online',\n    Outside = 'outside',\n    Home = 'home',\n    Office = 'office',\n    DoctorOffice = 'doctorOffice',\n    MassageOffice = 'massageOffice',\n}\n\nexport default class Location implements Model {\n    id: string;\n    type: Types;\n    name: string;\n    slug: string;\n    city: string;\n    address: string;\n    typeOption: Option<Types>;\n\n    constructor(data: ApiLocation) {\n        this.id = data.id;\n        this.type =  this.getType(this.type);\n        this.name = data.name;\n        this.slug = data.slug;\n        this.city = data.city;\n        this.address = data.address;\n        this.typeOption = this.getTypeOption(this.type);\n    }\n\n    getType = (type: Types): Types => {\n        if(type === Types.Gym) {\n            return Types.Gym;\n        }\n\n        if(type === Types.Online) {\n            return Types.Online;\n        }\n\n        if(type === Types.Outside) {\n            return Types.Outside;\n        }\n\n        if(type === Types.Home) {\n            return Types.Home;\n        }\n\n        if(type === Types.Office) {\n            return Types.Office;\n        }\n\n        if(type === Types.DoctorOffice) {\n            return Types.DoctorOffice;\n        }\n\n        if(type === Types.MassageOffice) {\n            return Types.MassageOffice;\n        }\n    }\n\n    getTypeOption = (type: Types): Option<Types> => {\n        return typeOptions.find(option => option.value === type) || null;\n    }\n}\n\nexport const typeOptions: Option<Types>[] = [{\n    value: Types.Gym,\n    label: 'Siłownia',\n}, {\n    value: Types.Online,\n    label: 'Online',\n}, {\n    value: Types.Outside,\n    label: 'Plener',\n}, {\n    value: Types.Home,\n    label: 'Dom klienta',\n}, {\n    value: Types.Office,\n    label: 'Biuro',\n}, {\n    value: Types.DoctorOffice,\n    label: 'Gabinet lekarski',\n}, {\n    value: Types.MassageOffice,\n    label: 'Gabinet masażu',\n}]"]},"metadata":{},"sourceType":"module"}