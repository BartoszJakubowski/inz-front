{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { deserialize, replaceObjectVariables } from 'utils/object';\nimport pl from 'locales/pl.json';\nexport function getLocale(locale = null) {\n  const result = deserialize(_objectSpread({}, pl));\n  return replaceObjectVariables(_objectSpread({}, result), _objectSpread({}, result));\n}","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/utils/locale.ts"],"names":["deserialize","replaceObjectVariables","pl","getLocale","locale","result"],"mappings":";;;;;;AAGA,SAASA,WAAT,EAAsBC,sBAAtB,QAAoD,cAApD;AAEA,OAAOC,EAAP,MAAe,iBAAf;AAEA,OAAO,SAASC,SAAT,CAAmBC,MAAe,GAAG,IAArC,EAAmD;AACtD,QAAMC,MAAM,GAAGL,WAAW,mBAAME,EAAN,EAA1B;AACA,SAAOD,sBAAsB,mBAAMI,MAAN,qBAAqBA,MAArB,EAA7B;AACH","sourcesContent":["import { Locales } from 'types/locales';\nimport { Locale } from 'locales/types/locale';\n\nimport { deserialize, replaceObjectVariables } from 'utils/object';\n\nimport pl from 'locales/pl.json';\n\nexport function getLocale(locale: Locales = null): Locale {    \n    const result = deserialize({ ...pl });\n    return replaceObjectVariables({ ...result }, { ...result });\n}\n\n"]},"metadata":{},"sourceType":"module"}