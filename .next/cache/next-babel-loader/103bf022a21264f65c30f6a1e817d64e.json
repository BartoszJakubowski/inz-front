{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Location from 'models/Location';\nimport UserSpecialization from 'models/UserSpecialization';\nexport default class User {\n  constructor(data) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"bio\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"surname\", void 0);\n\n    _defineProperty(this, \"avatar\", void 0);\n\n    _defineProperty(this, \"slug\", void 0);\n\n    _defineProperty(this, \"locations\", void 0);\n\n    _defineProperty(this, \"fullName\", void 0);\n\n    _defineProperty(this, \"userSpecializations\", void 0);\n\n    _defineProperty(this, \"primarySpecialization\", void 0);\n\n    _defineProperty(this, \"similarTrainers\", void 0);\n\n    _defineProperty(this, \"getFullName\", (name, surname) => {\n      return `${name || ''} ${surname || ''}`;\n    });\n\n    this.id = data.id;\n    this.bio = data.bio;\n    this.name = data.name;\n    this.surname = data.surname;\n    this.avatar = data.avatar;\n    this.slug = data.slug;\n    this.locations = Array.isArray(data.locations) ? data.locations.filter(location => location).map(location => new Location(location)) : [];\n    this.fullName = this.getFullName(this.name, this.surname);\n    this.userSpecializations = Array.isArray(data.userSpecializations) ? data.userSpecializations.map(userSpecialization => new UserSpecialization(userSpecialization)) : [];\n    this.similarTrainers = Array.isArray(data.similarTrainers) ? data.similarTrainers.map(similarTrainer => new User(similarTrainer)) : [];\n    this.primarySpecialization = data.primarySpecialization;\n  }\n\n}","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/models/User.ts"],"names":["Location","UserSpecialization","User","constructor","data","name","surname","id","bio","avatar","slug","locations","Array","isArray","filter","location","map","fullName","getFullName","userSpecializations","userSpecialization","similarTrainers","similarTrainer","primarySpecialization"],"mappings":";;AAIA,OAAOA,QAAP,MAAqB,iBAArB;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AAEA,eAAe,MAAMC,IAAN,CAA4B;AAavCC,EAAAA,WAAW,CAACC,IAAD,EAAgB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,yCAsBb,CAACC,IAAD,EAAgBC,OAAhB,KAA6C;AACvD,aAAQ,GAAED,IAAI,IAAI,EAAG,IAAGC,OAAO,IAAI,EAAG,EAAtC;AACH,KAxB0B;;AACvB,SAAKC,EAAL,GAAUH,IAAI,CAACG,EAAf;AACA,SAAKC,GAAL,GAAWJ,IAAI,CAACI,GAAhB;AACA,SAAKH,IAAL,GAAYD,IAAI,CAACC,IAAjB;AACA,SAAKC,OAAL,GAAeF,IAAI,CAACE,OAApB;AACA,SAAKG,MAAL,GAAcL,IAAI,CAACK,MAAnB;AACA,SAAKC,IAAL,GAAYN,IAAI,CAACM,IAAjB;AACA,SAAKC,SAAL,GAAiBC,KAAK,CAACC,OAAN,CAAcT,IAAI,CAACO,SAAnB,IACXP,IAAI,CAACO,SAAL,CACGG,MADH,CACUC,QAAQ,IAAIA,QADtB,EAEGC,GAFH,CAEOD,QAAQ,IAAI,IAAIf,QAAJ,CAAae,QAAb,CAFnB,CADW,GAIX,EAJN;AAKA,SAAKE,QAAL,GAAgB,KAAKC,WAAL,CAAiB,KAAKb,IAAtB,EAA4B,KAAKC,OAAjC,CAAhB;AACA,SAAKa,mBAAL,GAA2BP,KAAK,CAACC,OAAN,CAAcT,IAAI,CAACe,mBAAnB,IACrBf,IAAI,CAACe,mBAAL,CAAyBH,GAAzB,CAA6BI,kBAAkB,IAAI,IAAInB,kBAAJ,CAAuBmB,kBAAvB,CAAnD,CADqB,GAErB,EAFN;AAGA,SAAKC,eAAL,GAAuBT,KAAK,CAACC,OAAN,CAAcT,IAAI,CAACiB,eAAnB,IACjBjB,IAAI,CAACiB,eAAL,CAAqBL,GAArB,CAAyBM,cAAc,IAAI,IAAIpB,IAAJ,CAASoB,cAAT,CAA3C,CADiB,GAEjB,EAFN;AAGA,SAAKC,qBAAL,GAA6BnB,IAAI,CAACmB,qBAAlC;AACH;;AAjCsC","sourcesContent":["import Model from 'models/Model';\n\nimport ApiUser from 'types/api/User';\n\nimport Location from 'models/Location';\nimport UserSpecialization from 'models/UserSpecialization';\n\nexport default class User implements Model {\n    id: string;\n    bio: string;\n    name: string;\n    surname: string;\n    avatar: string;\n    slug: string;\n    locations: Location[];\n    fullName: string;\n    userSpecializations: UserSpecialization[];\n    primarySpecialization: UserSpecialization;\n    similarTrainers: User[];\n\n    constructor(data: ApiUser) {\n        this.id = data.id;\n        this.bio = data.bio;\n        this.name = data.name;\n        this.surname = data.surname;\n        this.avatar = data.avatar;\n        this.slug = data.slug;\n        this.locations = Array.isArray(data.locations)\n            ? data.locations\n                .filter(location => location)\n                .map(location => new Location(location))\n            : [];\n        this.fullName = this.getFullName(this.name, this.surname);\n        this.userSpecializations = Array.isArray(data.userSpecializations)\n            ? data.userSpecializations.map(userSpecialization => new UserSpecialization(userSpecialization))\n            : [];\n        this.similarTrainers = Array.isArray(data.similarTrainers)\n            ? data.similarTrainers.map(similarTrainer => new User(similarTrainer))\n            : [];\n        this.primarySpecialization = data.primarySpecialization;\n    }\n\n    getFullName = (name?: string, surname?: string): string => {\n        return `${name || ''} ${surname || ''}`;\n    }\n}"]},"metadata":{},"sourceType":"module"}