{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Specialization from 'models/Specialization';\nexport var Types;\n\n(function (Types) {\n  Types[\"Primary\"] = \"type_primary\";\n  Types[\"Secondary\"] = \"type_secondary\";\n})(Types || (Types = {}));\n\nvar UserSpecialization = function UserSpecialization(data) {\n  _classCallCheck(this, UserSpecialization);\n\n  _defineProperty(this, \"id\", void 0);\n\n  _defineProperty(this, \"specializationId\", void 0);\n\n  _defineProperty(this, \"userId\", void 0);\n\n  _defineProperty(this, \"type\", void 0);\n\n  _defineProperty(this, \"typeOption\", void 0);\n\n  _defineProperty(this, \"specialization\", void 0);\n\n  _defineProperty(this, \"getType\", function (type) {\n    if (type) {\n      if (type === Types.Primary) {\n        return Types.Primary;\n      }\n\n      return Types.Secondary;\n    }\n\n    return null;\n  });\n\n  _defineProperty(this, \"getTypeOption\", function (type) {\n    return typeOptions.find(function (option) {\n      return option.value === type;\n    }) || null;\n  });\n\n  this.id = data.id;\n  this.specializationId = data.specializationId;\n  this.userId = data.userId;\n  this.type = this.getType(data.type);\n  this.typeOption = this.getTypeOption(data.type);\n  this.specialization = data.specialization && new Specialization(data.specialization) || null;\n};\n\nexport { UserSpecialization as default };\nexport var typeOptions = [{\n  value: Types.Primary,\n  label: 'Główna'\n}, {\n  value: Types.Secondary,\n  label: 'Poboczna'\n}];","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/models/UserSpecialization.ts"],"names":["Specialization","Types","UserSpecialization","data","type","Primary","Secondary","typeOptions","find","option","value","id","specializationId","userId","getType","typeOption","getTypeOption","specialization","label"],"mappings":";;AAKA,OAAOA,cAAP,MAA2B,uBAA3B;AAEA,WAAYC,KAAZ;;WAAYA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;GAAAA,K,KAAAA,K;;IAKSC,kB,GAQjB,4BAAYC,IAAZ,EAAyC;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,mCAS/B,UAACC,IAAD,EAAwB;AAC9B,QAAIA,IAAJ,EAAU;AACN,UAAGA,IAAI,KAAKH,KAAK,CAACI,OAAlB,EAA2B;AACvB,eAAOJ,KAAK,CAACI,OAAb;AACH;;AAED,aAAOJ,KAAK,CAACK,SAAb;AACH;;AAED,WAAO,IAAP;AACH,GAnBwC;;AAAA,yCAqBzB,UAACF,IAAD,EAAgC;AAC5C,WAAOG,WAAW,CAACC,IAAZ,CAAiB,UAAAC,MAAM;AAAA,aAAIA,MAAM,CAACC,KAAP,KAAiBN,IAArB;AAAA,KAAvB,KAAqD,IAA5D;AACH,GAvBwC;;AACrC,OAAKO,EAAL,GAAUR,IAAI,CAACQ,EAAf;AACA,OAAKC,gBAAL,GAAwBT,IAAI,CAACS,gBAA7B;AACA,OAAKC,MAAL,GAAcV,IAAI,CAACU,MAAnB;AACA,OAAKT,IAAL,GAAY,KAAKU,OAAL,CAAaX,IAAI,CAACC,IAAlB,CAAZ;AACA,OAAKW,UAAL,GAAkB,KAAKC,aAAL,CAAmBb,IAAI,CAACC,IAAxB,CAAlB;AACA,OAAKa,cAAL,GAAsBd,IAAI,CAACc,cAAL,IAAuB,IAAIjB,cAAJ,CAAmBG,IAAI,CAACc,cAAxB,CAAvB,IAAkE,IAAxF;AACH,C;;SAfgBf,kB;AAkCrB,OAAO,IAAMK,WAA4B,GAAG,CAAC;AACzCG,EAAAA,KAAK,EAAET,KAAK,CAACI,OAD4B;AAEzCa,EAAAA,KAAK,EAAE;AAFkC,CAAD,EAGzC;AACCR,EAAAA,KAAK,EAAET,KAAK,CAACK,SADd;AAECY,EAAAA,KAAK,EAAE;AAFR,CAHyC,CAArC","sourcesContent":["import Model from 'models/Model';\n\nimport ApiUserSpecialization from 'types/api/UserSpecialization';\nimport { Option } from 'types/options';\n\nimport Specialization from 'models/Specialization';\n\nexport enum Types {\n    Primary = 'type_primary',\n    Secondary = 'type_secondary',\n}\n\nexport default class UserSpecialization implements Model {\n    id: string;\n    specializationId: string;\n    userId: string;\n    type: Types;\n    typeOption: Option<Types>;\n    specialization: Specialization;\n\n    constructor(data: ApiUserSpecialization) {\n        this.id = data.id;\n        this.specializationId = data.specializationId;\n        this.userId = data.userId;\n        this.type = this.getType(data.type);\n        this.typeOption = this.getTypeOption(data.type);\n        this.specialization = data.specialization && new Specialization(data.specialization) || null\n    }\n\n    getType = (type: Types): Types => {\n        if (type) {\n            if(type === Types.Primary) {\n                return Types.Primary;\n            }\n    \n            return Types.Secondary;\n        }\n\n        return null;\n    }\n\n    getTypeOption = (type: Types): Option<Types> => {\n        return typeOptions.find(option => option.value === type) || null;\n    }\n}\n\nexport const typeOptions: Option<Types>[] = [{\n    value: Types.Primary,\n    label: 'Główna',\n}, {\n    value: Types.Secondary,\n    label: 'Poboczna',\n}]"]},"metadata":{},"sourceType":"module"}