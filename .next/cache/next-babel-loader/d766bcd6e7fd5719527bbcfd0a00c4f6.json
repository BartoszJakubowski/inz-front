{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport getConfig from 'next/config';\nimport axios from 'axios';\nimport { INIT_FLAG, SUCCESS_FLAG, FAIL_FLAG } from 'consts/redux';\nimport { parseToQueryString } from 'utils/querystring';\nimport { mapErrors } from 'utils/api';\nimport Logger from 'services/Logger';\nexport var reduxRequest = function reduxRequest(options) {\n  return function (dispatch) {\n    var storeState = options.getState();\n    options = transformOptions(options, storeState);\n\n    if (!options.ignoreState) {\n      dispatch({\n        state: INIT_FLAG,\n        type: options.reduxType + '_' + INIT_FLAG,\n        params: options.params\n      });\n    }\n\n    return new Promise(function (resolve, reject) {\n      var requestConfig = getRequestCofnig(options); // Logger.log('API Request', {\n      //     url: requestConfig.url,\n      //     options: options,\n      //     requestConfig: requestConfig,\n      // });\n\n      return axios(requestConfig).then(function (response) {\n        // Logger.log('API Response', options, response);\n        if (options.actionsOnCode && options.actionsOnCode[response.status]) {\n          options.actionsOnCode[response.status](response);\n        }\n\n        return resolve(options.ignoreState ? {\n          state: SUCCESS_FLAG,\n          type: options.reduxType + '_' + SUCCESS_FLAG,\n          payload: response,\n          params: options.params\n        } : dispatch({\n          state: SUCCESS_FLAG,\n          type: options.reduxType + '_' + SUCCESS_FLAG,\n          payload: response,\n          params: options.params\n        }));\n      })[\"catch\"](function (error) {\n        console.error(error && error.response || error);\n\n        try {\n          var _error$response;\n\n          Logger.warning('API Error', {\n            options: options,\n            response: error.response\n          });\n\n          if (options.actionsOnCode && options.actionsOnCode[error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status]) {\n            var _error$response2;\n\n            options.actionsOnCode[error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status](error === null || error === void 0 ? void 0 : error.response);\n          }\n\n          return reject(options.ignoreState ? {\n            state: FAIL_FLAG,\n            type: options.reduxType + '_' + FAIL_FLAG,\n            payload: mapErrors(error && error.response),\n            params: options.params\n          } : dispatch({\n            state: FAIL_FLAG,\n            type: options.reduxType + '_' + FAIL_FLAG,\n            payload: mapErrors(error && error.response),\n            params: options.params\n          }));\n        } catch (error) {\n          Logger.error('API Network Error', {\n            options: options,\n            error: error\n          });\n          return reject(options.ignoreState ? {\n            state: FAIL_FLAG,\n            type: options.reduxType + '_' + FAIL_FLAG,\n            payload: mapErrors(error && error.response),\n            params: options.params\n          } : dispatch({\n            state: FAIL_FLAG,\n            type: options.reduxType + '_' + FAIL_FLAG,\n            payload: mapErrors(error && error.response),\n            params: options.params\n          }));\n        }\n      });\n    });\n  };\n}; // export function redirectToApiEndpoint(path) {\n//     const store = initializeStore({});\n//     const storeState = store.getState();\n//     const apiUrl = parseToQueryString(process.env.API_URL + path, {\n//         authToken: storeState.user.authToken,\n//     });\n//     const win = window.open(\n//         apiUrl,\n//         '_blank'\n//     );\n//     win.focus();\n// }\n\nfunction getRequestCofnig(options) {\n  return {\n    method: options.method.toUpperCase(),\n    url: options.url,\n    headers: _objectSpread({\n      'Content-Type': 'application/json; charset=UTF-8'\n    }, options.headers),\n    data: options.data,\n    timeout: options.timeout || 10000,\n    responseType: 'json',\n    adapter: options.adapter || undefined,\n    validateStatus: function validateStatus(status) {\n      return status >= 200 && status < 300;\n    },\n    paramsSerializer: function paramsSerializer(params) {\n      return JSON.stringify(params);\n    }\n  };\n}\n\nfunction transformOptions(options, storeState) {\n  var _storeState$user;\n\n  var _getConfig = getConfig(),\n      publicRuntimeConfig = _getConfig.publicRuntimeConfig; // Attach headers\n\n\n  options.headers = _objectSpread({}, options.headers || {});\n\n  if ((_storeState$user = storeState.user) !== null && _storeState$user !== void 0 && _storeState$user.authToken) {\n    options.headers = _objectSpread(_objectSpread({}, options.headers), {}, {\n      'authorization': 'Bearer ' + storeState.user.authToken\n    });\n  } // Ensure that requestParams is object\n\n\n  if (typeof options.requestParams !== 'object' || !options.requestParams) {\n    options.requestParams = {};\n  } // Support for PUT request methods\n\n\n  if (options.method.toUpperCase() === 'PUT' && !options.forceMethod) {\n    options.method = 'POST';\n    options.requestParams._method = 'PUT';\n  } // Support for DELETE request methods\n\n\n  if (options.method.toUpperCase() === 'DELETE' && !options.forceMethod) {\n    options.method = 'POST';\n    options.requestParams._method = 'DELETE';\n  }\n\n  if (options.method.toUpperCase() === 'GET') {\n    options.path = parseToQueryString(options.path, options.requestParams);\n  }\n\n  options.data = options.requestParams;\n\n  if (options.asFormData) {\n    var formData = new FormData();\n    Object.keys(options.data).forEach(function (key) {\n      formData.append(key, options.data[key]);\n    });\n    options.data = formData;\n  } // Get api path\n\n\n  options.url = publicRuntimeConfig.API_URL + options.path;\n\n  if (options.apiUrl) {\n    options.url = options.apiUrl + options.path;\n  }\n\n  return options;\n}","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/services/Api.ts"],"names":["getConfig","axios","INIT_FLAG","SUCCESS_FLAG","FAIL_FLAG","parseToQueryString","mapErrors","Logger","reduxRequest","options","dispatch","storeState","getState","transformOptions","ignoreState","state","type","reduxType","params","Promise","resolve","reject","requestConfig","getRequestCofnig","then","response","actionsOnCode","status","payload","error","console","warning","method","toUpperCase","url","headers","data","timeout","responseType","adapter","undefined","validateStatus","paramsSerializer","JSON","stringify","publicRuntimeConfig","user","authToken","requestParams","forceMethod","_method","path","asFormData","formData","FormData","Object","keys","forEach","key","append","API_URL","apiUrl"],"mappings":"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","sourcesContent":["import getConfig from 'next/config';\nimport axios, { AxiosRequestConfig } from 'axios';\n\nimport { INIT_FLAG, SUCCESS_FLAG, FAIL_FLAG } from 'consts/redux';\nimport { State as ReduxState } from 'store/state';\n\nimport { parseToQueryString } from 'utils/querystring';\nimport { mapErrors } from 'utils/api';\n\nimport Logger from 'services/Logger';\n\nexport interface ReduxRequestOptions {\n    getState: Function;\n    ignoreState?: boolean;\n    reduxType: string;\n    method: string;\n    path: string;\n    params: any;\n    headers?: any;\n    requestParams?: any;\n    forceMethod?: string;\n    asFormData?: boolean;\n    url?: string;\n    apiUrl?: string;\n    data?: any;\n    timeout?: number;\n    actionsOnCode?: {\n        [field: number]: (response: any) => any;\n    };\n}\n\nexport interface ReduxRequestPayload {\n    state: string;\n    type: string;\n    payload: {\n        data: any;\n    };\n    params: object;\n}\n\nexport const reduxRequest = (options: ReduxRequestOptions) => (dispatch: Function) : Promise<ReduxRequestPayload> => {\n    const storeState = options.getState();\n    options = transformOptions(options, storeState);\n\n    if(!options.ignoreState) {\n        dispatch({\n            state: INIT_FLAG,\n            type: options.reduxType + '_' + INIT_FLAG,\n            params: options.params,\n        });\n    }\n\n    return new Promise((resolve, reject) => {\n        const requestConfig = getRequestCofnig(options);\n        // Logger.log('API Request', {\n        //     url: requestConfig.url,\n        //     options: options,\n        //     requestConfig: requestConfig,\n        // });\n\n        return axios(requestConfig)\n            .then(response => {\n                // Logger.log('API Response', options, response);\n\n                if(options.actionsOnCode && options.actionsOnCode[response.status]) {\n                    options.actionsOnCode[response.status](response);\n                }\n\n                return resolve(\n                    options.ignoreState\n                        ? {\n                            state: SUCCESS_FLAG,\n                            type: options.reduxType + '_' + SUCCESS_FLAG,\n                            payload: response,\n                            params: options.params,\n                        }\n                        : dispatch({\n                            state: SUCCESS_FLAG,\n                            type: options.reduxType + '_' + SUCCESS_FLAG,\n                            payload: response,\n                            params: options.params,\n                        })\n                );\n            })\n            .catch(error => {\n                console.error(error && error.response || error);\n                try {\n                    Logger.warning('API Error', {\n                        options,\n                        response: error.response,\n                    });\n\n                    if(options.actionsOnCode && options.actionsOnCode[error?.response?.status]) {\n                        options.actionsOnCode[error?.response?.status](error?.response);\n                    }\n\n                    return reject(\n                        options.ignoreState\n                            ? {\n                                state: FAIL_FLAG,\n                                type: options.reduxType + '_' + FAIL_FLAG,\n                                payload: mapErrors(error && error.response),\n                                params: options.params,\n                            }\n                            : dispatch({\n                                state: FAIL_FLAG,\n                                type: options.reduxType + '_' + FAIL_FLAG,\n                                payload: mapErrors(error && error.response),\n                                params: options.params,\n                            })\n                    );\n                } catch (error) {\n                    Logger.error('API Network Error', {\n                        options,\n                        error,\n                    });\n\n                    return reject(\n                        options.ignoreState\n                            ? {\n                                state: FAIL_FLAG,\n                                type: options.reduxType + '_' + FAIL_FLAG,\n                                payload: mapErrors(error && error.response),\n                                params: options.params,\n                            }\n                            : dispatch({\n                                state: FAIL_FLAG,\n                                type: options.reduxType + '_' + FAIL_FLAG,\n                                payload: mapErrors(error && error.response),\n                                params: options.params,\n                            })\n                    );\n                }\n            })\n    });\n};\n\n// export function redirectToApiEndpoint(path) {\n//     const store = initializeStore({});\n//     const storeState = store.getState();\n//     const apiUrl = parseToQueryString(process.env.API_URL + path, {\n//         authToken: storeState.user.authToken,\n//     });\n\n//     const win = window.open(\n//         apiUrl,\n//         '_blank'\n//     );\n//     win.focus();\n// }\n\nfunction getRequestCofnig(options: any): AxiosRequestConfig {\n    return {\n        method: options.method.toUpperCase(),\n        url: options.url,\n        headers: {\n            'Content-Type': 'application/json; charset=UTF-8',\n            ...options.headers,\n        },\n        data: options.data,\n        timeout: options.timeout || 10000,\n        responseType: 'json',\n        adapter: options.adapter || undefined,\n        validateStatus: status => {\n            return status >= 200 && status < 300;\n        },\n        paramsSerializer: params => {\n            return JSON.stringify(params);\n        },\n    };\n}\n\nfunction transformOptions(options: ReduxRequestOptions, storeState: ReduxState) {\n    const { publicRuntimeConfig } = getConfig();\n\n    // Attach headers\n    options.headers = {\n        ...options.headers || {},\n    };\n\n    if (storeState.user?.authToken) {\n        options.headers = {\n            ...options.headers,\n            'authorization': 'Bearer ' + storeState.user.authToken,\n        };\n    }\n\n    // Ensure that requestParams is object\n    if (typeof options.requestParams !== 'object' || !options.requestParams) {\n        options.requestParams = {};\n    }\n\n    // Support for PUT request methods\n    if (options.method.toUpperCase() === 'PUT' && !options.forceMethod) {\n        options.method = 'POST';\n        options.requestParams._method = 'PUT';\n    }\n\n    // Support for DELETE request methods\n    if (options.method.toUpperCase() === 'DELETE' && !options.forceMethod) {\n        options.method = 'POST';\n        options.requestParams._method = 'DELETE';\n    }\n\n    if (options.method.toUpperCase() === 'GET') {\n        options.path = parseToQueryString(options.path, options.requestParams);\n    }\n\n    options.data = options.requestParams;\n    if (options.asFormData) {\n        const formData = new FormData();\n        Object.keys(options.data).forEach(key => {\n            formData.append(key, options.data[key]);\n        });\n        options.data = formData;\n    }\n\n    // Get api path\n    options.url = publicRuntimeConfig.API_URL + options.path;\n    if (options.apiUrl) {\n        options.url = options.apiUrl + options.path;\n    }\n\n    return options;\n}\n"]},"metadata":{},"sourceType":"module"}