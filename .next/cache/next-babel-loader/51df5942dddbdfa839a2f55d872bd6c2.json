{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport qs from 'qs';\nimport { isJsonString } from 'utils/string';\nexport function parseQueryToObject(queryString = '', jsonToValue = false) {\n  if (!queryString.includes('?')) {\n    queryString = '';\n  }\n\n  const queryStringArray = queryString.split('?');\n  queryString = queryStringArray[queryStringArray.length - 1];\n  const queryObject = qs.parse(queryString.replace('?', ''));\n\n  if (jsonToValue) {\n    Object.keys(queryObject).forEach(key => {\n      try {\n        if (isJsonString(queryObject[key])) {\n          queryObject[key] = JSON.parse(queryObject[key]).value;\n        }\n      } catch (error) {// Ignore\n      }\n    });\n  }\n\n  return queryObject;\n}\nexport function parseToQueryString(url, params = {}) {\n  const urlParts = url.split('?');\n  const urlPath = urlParts[0];\n  const urlParams = typeof urlParts[1] !== 'undefined' ? qs.parse(urlParts[1]) : {};\n  params = _objectSpread(_objectSpread({}, urlParams), params);\n  return `${urlPath}?${qs.stringify(params)}`.replace(/\\?+$/, ''); // Replace all \"?\" chars at the of string\n}\nexport function filterParams(params = {}, filter = []) {\n  const filteredParams = {};\n  Object.keys(params).forEach(paramName => {\n    if (!filter.includes(paramName)) {\n      filteredParams[paramName] = params[paramName];\n    }\n  });\n  return filteredParams;\n}","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/utils/querystring.ts"],"names":["qs","isJsonString","parseQueryToObject","queryString","jsonToValue","includes","queryStringArray","split","length","queryObject","parse","replace","Object","keys","forEach","key","JSON","value","error","parseToQueryString","url","params","urlParts","urlPath","urlParams","stringify","filterParams","filter","filteredParams","paramName"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AAEA,SAASC,YAAT,QAA6B,cAA7B;AAEA,OAAO,SAASC,kBAAT,CAA4BC,WAAW,GAAG,EAA1C,EAA8CC,WAAW,GAAG,KAA5D,EAAwE;AAC3E,MAAG,CAACD,WAAW,CAACE,QAAZ,CAAqB,GAArB,CAAJ,EAA+B;AAC3BF,IAAAA,WAAW,GAAG,EAAd;AACH;;AAED,QAAMG,gBAAgB,GAAGH,WAAW,CAACI,KAAZ,CAAkB,GAAlB,CAAzB;AACAJ,EAAAA,WAAW,GAAGG,gBAAgB,CAACA,gBAAgB,CAACE,MAAjB,GAA0B,CAA3B,CAA9B;AAEA,QAAMC,WAAW,GAAGT,EAAE,CAACU,KAAH,CAASP,WAAW,CAACQ,OAAZ,CAAoB,GAApB,EAAyB,EAAzB,CAAT,CAApB;;AAEA,MAAIP,WAAJ,EAAiB;AACbQ,IAAAA,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,OAAzB,CAAiCC,GAAG,IAAI;AACpC,UAAI;AACA,YAAId,YAAY,CAACQ,WAAW,CAACM,GAAD,CAAZ,CAAhB,EAAoC;AAChCN,UAAAA,WAAW,CAACM,GAAD,CAAX,GAAmBC,IAAI,CAACN,KAAL,CAAWD,WAAW,CAACM,GAAD,CAAtB,EAA6BE,KAAhD;AACH;AACJ,OAJD,CAIE,OAAOC,KAAP,EAAc,CACZ;AACH;AACJ,KARD;AASH;;AAED,SAAOT,WAAP;AACH;AAED,OAAO,SAASU,kBAAT,CAA4BC,GAA5B,EAAyCC,MAAM,GAAG,EAAlD,EAA8D;AACjE,QAAMC,QAAQ,GAAGF,GAAG,CAACb,KAAJ,CAAU,GAAV,CAAjB;AACA,QAAMgB,OAAO,GAAGD,QAAQ,CAAC,CAAD,CAAxB;AACA,QAAME,SAAS,GAAG,OAAOF,QAAQ,CAAC,CAAD,CAAf,KAAuB,WAAvB,GAAqCtB,EAAE,CAACU,KAAH,CAASY,QAAQ,CAAC,CAAD,CAAjB,CAArC,GAA6D,EAA/E;AAEAD,EAAAA,MAAM,mCACCG,SADD,GAECH,MAFD,CAAN;AAIA,SAAQ,GAAEE,OAAQ,IAAGvB,EAAE,CAACyB,SAAH,CAAaJ,MAAb,CAAqB,EAAnC,CACFV,OADE,CACM,MADN,EACc,EADd,CAAP,CATiE,CAUvC;AAC7B;AAED,OAAO,SAASe,YAAT,CAAsBL,MAAM,GAAG,EAA/B,EAAmCM,MAAM,GAAG,EAA5C,EAAqD;AACxD,QAAMC,cAAc,GAAG,EAAvB;AACAhB,EAAAA,MAAM,CAACC,IAAP,CAAYQ,MAAZ,EAAoBP,OAApB,CAA4Be,SAAS,IAAI;AACrC,QAAI,CAACF,MAAM,CAACtB,QAAP,CAAgBwB,SAAhB,CAAL,EAAiC;AAC7BD,MAAAA,cAAc,CAACC,SAAD,CAAd,GAA4BR,MAAM,CAACQ,SAAD,CAAlC;AACH;AACJ,GAJD;AAMA,SAAOD,cAAP;AACH","sourcesContent":["import qs from 'qs';\n\nimport { isJsonString } from 'utils/string';\n\nexport function parseQueryToObject(queryString = '', jsonToValue = false): any {\n    if(!queryString.includes('?')) {\n        queryString = '';\n    }\n\n    const queryStringArray = queryString.split('?');\n    queryString = queryStringArray[queryStringArray.length - 1];\n\n    const queryObject = qs.parse(queryString.replace('?', ''));\n\n    if (jsonToValue) {\n        Object.keys(queryObject).forEach(key => {\n            try {\n                if (isJsonString(queryObject[key])) {\n                    queryObject[key] = JSON.parse(queryObject[key]).value;\n                }\n            } catch (error) {\n                // Ignore\n            }\n        });\n    }\n\n    return queryObject;\n}\n\nexport function parseToQueryString(url: string, params = {}): string {\n    const urlParts = url.split('?');\n    const urlPath = urlParts[0];\n    const urlParams = typeof urlParts[1] !== 'undefined' ? qs.parse(urlParts[1]) : {};\n\n    params = {\n        ...urlParams,\n        ...params,\n    };\n    return `${urlPath}?${qs.stringify(params)}`\n        .replace(/\\?+$/, ''); // Replace all \"?\" chars at the of string\n}\n\nexport function filterParams(params = {}, filter = []): any {\n    const filteredParams = {};\n    Object.keys(params).forEach(paramName => {\n        if (!filter.includes(paramName)) {\n            filteredParams[paramName] = params[paramName];\n        }\n    });\n\n    return filteredParams;\n}\n\n"]},"metadata":{},"sourceType":"module"}