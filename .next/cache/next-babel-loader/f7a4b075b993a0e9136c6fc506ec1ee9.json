{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport getConfig from 'next/config';\nimport Rollbar from 'rollbar';\nlet instance;\nexport default instance ? instance : init();\nexport function init(payload = {}) {\n  if (instance) {\n    return instance;\n  } else {\n    const {\n      serverRuntimeConfig,\n      publicRuntimeConfig\n    } = getConfig();\n    return instance = new Rollbar({\n      accessToken: false ? publicRuntimeConfig.ROLLBAR_CLIENT_KEY : serverRuntimeConfig.ROLLBAR_SERVER_KEY,\n      environment: process.env.APP_ENV,\n      autoInstrument: {\n        log: false\n      },\n      verbose: process.env.APP_ENV === 'development',\n      payload: _objectSpread({}, payload)\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}