{"ast":null,"code":"var _jsxFileName = \"/home/bartosz/Pulpit/inz/my-app/src/components/layout/Button/component.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @ts-ignore\nimport classnames from 'classnames';\nimport { ButtonElements, ButtonIconTypes } from './index';\nimport StyledComponent from './styles';\nimport Spinner, { Colors, Positions } from 'components/layout/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LayoutButton = ({\n  children,\n  href,\n  onClick,\n  type,\n  element,\n  className,\n  icon,\n  disabled,\n  size,\n  style,\n  variant,\n  layout,\n  loading,\n  confirm,\n  buttonProps,\n  shadow,\n  selected\n}) => {\n  const defaultConfirmProps = {\n    message: 'Potwierdź swój wybór'\n  };\n\n  const onCheckClick = () => {\n    if (disabled) {\n      return;\n    }\n\n    if (confirm !== null && confirm !== void 0 && confirm.enabled) {\n      const confirmConfig = _objectSpread(_objectSpread({}, defaultConfirmProps), confirm);\n\n      if (window.confirm(confirmConfig.message)) {\n        return onClick && onClick();\n      } else {\n        return null;\n      }\n    }\n\n    return onClick && onClick();\n  };\n\n  const getIcon = () => {\n    if (!icon) return null;\n\n    if (icon.type === ButtonIconTypes.Element) {\n      return icon.value || null;\n    }\n\n    if (icon.type === ButtonIconTypes.Image) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"button-icon-image\",\n        src: icon.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this);\n    }\n\n    return null;\n  };\n\n  const getContent = () => {\n    return loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      color: Colors.White,\n      position: Positions.Relative\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"button-content\",\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), icon && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-icon\",\n        children: getIcon()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true);\n  };\n\n  const getElement = () => {\n    const button = /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n      type: type,\n      onClick: onCheckClick,\n      disabled: disabled,\n      className: \"button\"\n    }, buttonProps), {}, {\n      children: getContent()\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n\n    switch (element) {\n      case ButtonElements.Anchor:\n        return /*#__PURE__*/_jsxDEV(\"a\", _objectSpread(_objectSpread({\n          href: href\n        }, buttonProps), {}, {\n          children: button\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this);\n\n      default:\n        return button;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledComponent, {\n    className: classnames('layout-button', className, `element-${element}`, `size-${size}`, `style-${style}`, `variant-${variant}`, `layout-${layout}`, {\n      disabled,\n      shadow: shadow === null || shadow === void 0 ? void 0 : shadow.enabled,\n      selected\n    }),\n    children: [getElement(), (shadow === null || shadow === void 0 ? void 0 : shadow.enabled) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-shadow\",\n      style: shadow.style || {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\nexport default LayoutButton;","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/components/layout/Button/component.tsx"],"names":["classnames","ButtonElements","ButtonIconTypes","StyledComponent","Spinner","Colors","Positions","LayoutButton","children","href","onClick","type","element","className","icon","disabled","size","style","variant","layout","loading","confirm","buttonProps","shadow","selected","defaultConfirmProps","message","onCheckClick","enabled","confirmConfig","window","getIcon","Element","value","Image","getContent","White","Relative","getElement","button","Anchor"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { FunctionComponent } from 'react';\nimport classnames from 'classnames';\n\nimport { Props, ButtonElements, ButtonIconTypes } from './index';\n\nimport StyledComponent from './styles';\nimport Spinner, { Colors, Positions } from 'components/layout/Spinner';\n\nconst LayoutButton: FunctionComponent<Props> = ({ children, href, onClick, type, element, className, icon, disabled, size, style, variant, layout, loading, confirm, buttonProps, shadow, selected }) => {\n    const defaultConfirmProps = {\n        message: 'Potwierdź swój wybór',\n    };\n\n    const onCheckClick = () => {\n        if (disabled) {\n            return;\n        }\n\n        if (confirm?.enabled) {\n            const confirmConfig = { ...defaultConfirmProps, ...confirm };\n\n            if (window.confirm(confirmConfig.message)) {\n                return onClick && onClick();\n            } else {\n                return null;\n            }\n        }\n\n        return onClick && onClick();\n    };\n\n    const getIcon = () => {\n        if(!icon) return null;\n\n        if(icon.type === ButtonIconTypes.Element) {\n            return icon.value || null;        \n        }\n\n        if(icon.type === ButtonIconTypes.Image) {\n            return (<img className=\"button-icon-image\" src={icon.value} />);    \n        }\n\n        return null;\n    }\n\n    const getContent = () => {\n        return loading\n            ? (\n                <Spinner\n                    color={Colors.White}\n                    position={Positions.Relative}\n                />\n            )\n            : (\n                <>\n                    <span className=\"button-content\">{children}</span>\n                    {icon && <div className=\"button-icon\">{getIcon()}</div>}\n                </>\n            )\n    }\n\n    const getElement = () => {\n        const button = (\n            <button\n                type={type}\n                onClick={onCheckClick}\n                disabled={disabled}\n                className=\"button\"\n                {...buttonProps}\n            >\n                {getContent()}\n            </button>\n        );\n\n        switch (element) {\n            case ButtonElements.Anchor:\n                return (\n                    <a \n                        href={href} \n                        {...buttonProps}\n                    >\n                        {button}\n                    </a>\n                )\n            default:\n                return button\n        }\n    }\n\n    return (\n        <StyledComponent\n            className={classnames(\n                'layout-button',\n                className,\n                `element-${element}`,\n                `size-${size}`,\n                `style-${style}`,\n                `variant-${variant}`,\n                `layout-${layout}`,\n                {\n                    disabled,\n                    shadow: shadow?.enabled,\n                    selected,\n                }\n            )}\n        >\n            {getElement()}\n            {shadow?.enabled && (\n                <div \n                    className=\"button-shadow\"\n                    style={shadow.style || {}}\n                />\n            )}\n        </StyledComponent>\n    );\n};\n\nexport default LayoutButton;"]},"metadata":{},"sourceType":"module"}