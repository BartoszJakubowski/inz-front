{"ast":null,"code":"var _jsxFileName = \"/home/bartosz/Pulpit/inz/my-app/src/components/layout/forms/InputWrapper/component.tsx\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle, faExclamationCircle, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport classnames from 'classnames';\nimport { ValidationActions } from './index';\nimport { ColorStates } from 'types/states';\nimport StyledComponent from './styles';\nimport InputLabel from 'components/layout/forms/InputLabel';\nimport InputHelper from 'components/layout/forms/InputHelper';\nimport InputError from 'components/layout/forms/InputError';\nimport Spinner, { Positions, Colors, Sizes } from 'components/layout/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LayoutFormsInputWrapper = ({\n  name,\n  children,\n  label,\n  helper,\n  error,\n  validationAction,\n  decoratorLeft,\n  decoratorRight,\n  required\n}) => {\n  const getLeftDecorator = () => {\n    if (error && validationAction === ValidationActions.Decorator && !decoratorLeft) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames('input-decorator', 'input-decorator-left', `input-decorator-state-${ColorStates.Warning}`),\n        children: getIcon({\n          visible: true,\n          state: ColorStates.Warning\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (decoratorLeft && decoratorLeft.visible !== false) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames('input-decorator', 'input-decorator-left', `input-decorator-state-${decoratorLeft.state || ColorStates.Info}`),\n        children: decoratorLeft.loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: Sizes.Small,\n          position: Positions.Relative,\n          color: Colors.White\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }, this) : getIcon(decoratorLeft)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this);\n    }\n\n    return null;\n  };\n\n  const getRightDecorator = () => {\n    if (decoratorRight && decoratorRight.visible !== false) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames('input-decorator', 'input-decorator-right', `input-decorator-state-${decoratorRight.state || ColorStates.Info}`),\n        children: decoratorRight.loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: Sizes.Small,\n          position: Positions.Relative,\n          color: Colors.White\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this) : getIcon(decoratorRight)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this);\n    }\n\n    return null;\n  };\n\n  const getIcon = decorator => {\n    if (decorator.children) {\n      return decorator.children;\n    }\n\n    if (decorator.state) {\n      switch (decorator.state) {\n        case ColorStates.Success:\n          return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faCheckCircle,\n            className: \"check-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this);\n\n        case ColorStates.Warning:\n          return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faExclamationCircle,\n            className: \"exclamation-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this);\n\n        case ColorStates.Alert:\n          return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faTimes,\n            className: \"times-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this);\n      }\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledComponent, {\n    className: \"layout-forms-input-wrapper\",\n    children: [(label || helper) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"label-wrapper\",\n      children: [helper && /*#__PURE__*/_jsxDEV(InputHelper, {\n        name: name,\n        text: helper\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this), label && /*#__PURE__*/_jsxDEV(InputLabel, {\n        required: required,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"internal-wrapper\",\n      children: [getLeftDecorator(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-body\",\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), getRightDecorator()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(InputError, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\nexport default LayoutFormsInputWrapper;","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/components/layout/forms/InputWrapper/component.tsx"],"names":["FontAwesomeIcon","faCheckCircle","faExclamationCircle","faTimes","classnames","ValidationActions","ColorStates","StyledComponent","InputLabel","InputHelper","InputError","Spinner","Positions","Colors","Sizes","LayoutFormsInputWrapper","name","children","label","helper","error","validationAction","decoratorLeft","decoratorRight","required","getLeftDecorator","Decorator","Warning","getIcon","visible","state","Info","loading","Small","Relative","White","getRightDecorator","decorator","Success","Alert"],"mappings":"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","sourcesContent":["import { FunctionComponent, ReactNode } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle, faExclamationCircle, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport classnames from 'classnames';\n\nimport { Props, ValidationActions, InputDecorator } from './index';\nimport { ColorStates } from 'types/states';\n\nimport StyledComponent from './styles';\nimport InputLabel from 'components/layout/forms/InputLabel';\nimport InputHelper from 'components/layout/forms/InputHelper';\nimport InputError from 'components/layout/forms/InputError';\nimport Spinner, { Positions, Colors, Sizes } from 'components/layout/Spinner';\n\nconst LayoutFormsInputWrapper: FunctionComponent<Props> = ({ name, children, label, helper, error, validationAction, decoratorLeft, decoratorRight, required }) => {\n    const getLeftDecorator = (): ReactNode => {\n        if(error && validationAction === ValidationActions.Decorator && !decoratorLeft) {\n            return (\n                <div\n                    className={classnames(\n                        'input-decorator',\n                        'input-decorator-left',\n                        `input-decorator-state-${ColorStates.Warning}`\n                    )}\n                >\n                    {getIcon({\n                        visible: true,\n                        state: ColorStates.Warning,\n                    })}\n                </div>\n            );\n        }\n\n        if(decoratorLeft && decoratorLeft.visible !== false) {\n            return (\n                <div\n                    className={classnames(\n                        'input-decorator',\n                        'input-decorator-left',\n                        `input-decorator-state-${decoratorLeft.state || ColorStates.Info}`\n                    )}\n                >\n                    {decoratorLeft.loading\n                        ? (\n                            <Spinner\n                                size={Sizes.Small}\n                                position={Positions.Relative}\n                                color={Colors.White}\n                            />\n                        )\n                        : getIcon(decoratorLeft)}\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    const getRightDecorator = (): ReactNode => {\n        if(decoratorRight && decoratorRight.visible !== false) {\n            return (\n                <div\n                    className={classnames(\n                        'input-decorator',\n                        'input-decorator-right',\n                        `input-decorator-state-${decoratorRight.state || ColorStates.Info}`\n                    )}\n                >\n                    {decoratorRight.loading\n                        ? (\n                            <Spinner\n                                size={Sizes.Small}\n                                position={Positions.Relative}\n                                color={Colors.White}\n                            />\n                        )\n                        : getIcon(decoratorRight)}\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    const getIcon = (decorator: InputDecorator): ReactNode => {\n        if(decorator.children) {\n            return decorator.children;\n        }\n\n        if(decorator.state) {\n            switch (decorator.state) {\n                case ColorStates.Success:\n                    return (<FontAwesomeIcon icon={faCheckCircle} className=\"check-icon\" />);\n                case ColorStates.Warning:\n                    return (<FontAwesomeIcon icon={faExclamationCircle} className=\"exclamation-icon\" />);\n                case ColorStates.Alert:\n                    return (<FontAwesomeIcon icon={faTimes} className=\"times-icon\" />);\n            }\n        }\n\n        return null;\n    }\n\n    return (\n        <StyledComponent className=\"layout-forms-input-wrapper\">\n            {(label || helper) && (\n                <div className=\"label-wrapper\">\n                    {helper && (\n                        <InputHelper\n                            name={name}\n                            text={helper}\n                        />\n                    )}\n                    {label && (\n                        <InputLabel required={required}>\n                            {label}\n                        </InputLabel>\n                    )}\n                </div>\n            )}\n            <div className=\"internal-wrapper\">\n                {getLeftDecorator()}\n                <div className=\"input-body\">\n                    {children}\n                </div>\n                {getRightDecorator()}\n            </div>\n            {error && (\n                <InputError>\n                    {error}\n                </InputError>\n            )}\n        </StyledComponent>\n    );\n};\n\nexport default LayoutFormsInputWrapper;"]},"metadata":{},"sourceType":"module"}