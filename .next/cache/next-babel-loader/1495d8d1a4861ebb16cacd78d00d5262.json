{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport getConfig from 'next/config';\nimport axios from 'axios';\nimport { INIT_FLAG, SUCCESS_FLAG, FAIL_FLAG } from 'consts/redux';\nimport { parseToQueryString } from 'utils/querystring';\nimport { mapErrors } from 'utils/api';\nimport Logger from 'services/Logger';\nexport const reduxRequest = options => dispatch => {\n  const storeState = options.getState();\n  options = transformOptions(options, storeState);\n\n  if (!options.ignoreState) {\n    dispatch({\n      state: INIT_FLAG,\n      type: options.reduxType + '_' + INIT_FLAG,\n      params: options.params\n    });\n  }\n\n  return new Promise((resolve, reject) => {\n    const requestConfig = getRequestCofnig(options); // Logger.log('API Request', {\n    //     url: requestConfig.url,\n    //     options: options,\n    //     requestConfig: requestConfig,\n    // });\n\n    return axios(requestConfig).then(response => {\n      // Logger.log('API Response', options, response);\n      if (options.actionsOnCode && options.actionsOnCode[response.status]) {\n        options.actionsOnCode[response.status](response);\n      }\n\n      return resolve(options.ignoreState ? {\n        state: SUCCESS_FLAG,\n        type: options.reduxType + '_' + SUCCESS_FLAG,\n        payload: response,\n        params: options.params\n      } : dispatch({\n        state: SUCCESS_FLAG,\n        type: options.reduxType + '_' + SUCCESS_FLAG,\n        payload: response,\n        params: options.params\n      }));\n    }).catch(error => {\n      console.error(error && error.response || error);\n\n      try {\n        var _error$response;\n\n        Logger.warning('API Error', {\n          options,\n          response: error.response\n        });\n\n        if (options.actionsOnCode && options.actionsOnCode[error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status]) {\n          var _error$response2;\n\n          options.actionsOnCode[error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status](error === null || error === void 0 ? void 0 : error.response);\n        }\n\n        return reject(options.ignoreState ? {\n          state: FAIL_FLAG,\n          type: options.reduxType + '_' + FAIL_FLAG,\n          payload: mapErrors(error && error.response),\n          params: options.params\n        } : dispatch({\n          state: FAIL_FLAG,\n          type: options.reduxType + '_' + FAIL_FLAG,\n          payload: mapErrors(error && error.response),\n          params: options.params\n        }));\n      } catch (error) {\n        Logger.error('API Network Error', {\n          options,\n          error\n        });\n        return reject(options.ignoreState ? {\n          state: FAIL_FLAG,\n          type: options.reduxType + '_' + FAIL_FLAG,\n          payload: mapErrors(error && error.response),\n          params: options.params\n        } : dispatch({\n          state: FAIL_FLAG,\n          type: options.reduxType + '_' + FAIL_FLAG,\n          payload: mapErrors(error && error.response),\n          params: options.params\n        }));\n      }\n    });\n  });\n}; // export function redirectToApiEndpoint(path) {\n//     const store = initializeStore({});\n//     const storeState = store.getState();\n//     const apiUrl = parseToQueryString(process.env.API_URL + path, {\n//         authToken: storeState.user.authToken,\n//     });\n//     const win = window.open(\n//         apiUrl,\n//         '_blank'\n//     );\n//     win.focus();\n// }\n\nfunction getRequestCofnig(options) {\n  return {\n    method: options.method.toUpperCase(),\n    url: options.url,\n    headers: _objectSpread({\n      'Content-Type': 'application/json; charset=UTF-8'\n    }, options.headers),\n    data: options.data,\n    timeout: options.timeout || 10000,\n    responseType: 'json',\n    adapter: options.adapter || undefined,\n    validateStatus: status => {\n      return status >= 200 && status < 300;\n    },\n    paramsSerializer: params => {\n      return JSON.stringify(params);\n    }\n  };\n}\n\nfunction transformOptions(options, storeState) {\n  var _storeState$user;\n\n  const {\n    publicRuntimeConfig\n  } = getConfig(); // Attach headers\n\n  options.headers = _objectSpread({}, options.headers || {});\n\n  if ((_storeState$user = storeState.user) !== null && _storeState$user !== void 0 && _storeState$user.authToken) {\n    options.headers = _objectSpread(_objectSpread({}, options.headers), {}, {\n      'authorization': 'Bearer ' + storeState.user.authToken\n    });\n  } // Ensure that requestParams is object\n\n\n  if (typeof options.requestParams !== 'object' || !options.requestParams) {\n    options.requestParams = {};\n  } // Support for PUT request methods\n\n\n  if (options.method.toUpperCase() === 'PUT' && !options.forceMethod) {\n    options.method = 'POST';\n    options.requestParams._method = 'PUT';\n  } // Support for DELETE request methods\n\n\n  if (options.method.toUpperCase() === 'DELETE' && !options.forceMethod) {\n    options.method = 'POST';\n    options.requestParams._method = 'DELETE';\n  }\n\n  if (options.method.toUpperCase() === 'GET') {\n    options.path = parseToQueryString(options.path, options.requestParams);\n  }\n\n  options.data = options.requestParams;\n\n  if (options.asFormData) {\n    const formData = new FormData();\n    Object.keys(options.data).forEach(key => {\n      formData.append(key, options.data[key]);\n    });\n    options.data = formData;\n  } // Get api path\n\n\n  options.url = publicRuntimeConfig.API_URL + options.path;\n\n  if (options.apiUrl) {\n    options.url = options.apiUrl + options.path;\n  }\n\n  return options;\n}","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/services/Api.ts"],"names":["getConfig","axios","INIT_FLAG","SUCCESS_FLAG","FAIL_FLAG","parseToQueryString","mapErrors","Logger","reduxRequest","options","dispatch","storeState","getState","transformOptions","ignoreState","state","type","reduxType","params","Promise","resolve","reject","requestConfig","getRequestCofnig","then","response","actionsOnCode","status","payload","catch","error","console","warning","method","toUpperCase","url","headers","data","timeout","responseType","adapter","undefined","validateStatus","paramsSerializer","JSON","stringify","publicRuntimeConfig","user","authToken","requestParams","forceMethod","_method","path","asFormData","formData","FormData","Object","keys","forEach","key","append","API_URL","apiUrl"],"mappings":"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","sourcesContent":["import getConfig from 'next/config';\nimport axios, { AxiosRequestConfig } from 'axios';\n\nimport { INIT_FLAG, SUCCESS_FLAG, FAIL_FLAG } from 'consts/redux';\nimport { State as ReduxState } from 'store/state';\n\nimport { parseToQueryString } from 'utils/querystring';\nimport { mapErrors } from 'utils/api';\n\nimport Logger from 'services/Logger';\n\nexport interface ReduxRequestOptions {\n    getState: Function;\n    ignoreState?: boolean;\n    reduxType: string;\n    method: string;\n    path: string;\n    params: any;\n    headers?: any;\n    requestParams?: any;\n    forceMethod?: string;\n    asFormData?: boolean;\n    url?: string;\n    apiUrl?: string;\n    data?: any;\n    timeout?: number;\n    actionsOnCode?: {\n        [field: number]: (response: any) => any;\n    };\n}\n\nexport interface ReduxRequestPayload {\n    state: string;\n    type: string;\n    payload: {\n        data: any;\n    };\n    params: object;\n}\n\nexport const reduxRequest = (options: ReduxRequestOptions) => (dispatch: Function) : Promise<ReduxRequestPayload> => {\n    const storeState = options.getState();\n    options = transformOptions(options, storeState);\n\n    if(!options.ignoreState) {\n        dispatch({\n            state: INIT_FLAG,\n            type: options.reduxType + '_' + INIT_FLAG,\n            params: options.params,\n        });\n    }\n\n    return new Promise((resolve, reject) => {\n        const requestConfig = getRequestCofnig(options);\n        // Logger.log('API Request', {\n        //     url: requestConfig.url,\n        //     options: options,\n        //     requestConfig: requestConfig,\n        // });\n\n        return axios(requestConfig)\n            .then(response => {\n                // Logger.log('API Response', options, response);\n\n                if(options.actionsOnCode && options.actionsOnCode[response.status]) {\n                    options.actionsOnCode[response.status](response);\n                }\n\n                return resolve(\n                    options.ignoreState\n                        ? {\n                            state: SUCCESS_FLAG,\n                            type: options.reduxType + '_' + SUCCESS_FLAG,\n                            payload: response,\n                            params: options.params,\n                        }\n                        : dispatch({\n                            state: SUCCESS_FLAG,\n                            type: options.reduxType + '_' + SUCCESS_FLAG,\n                            payload: response,\n                            params: options.params,\n                        })\n                );\n            })\n            .catch(error => {\n                console.error(error && error.response || error);\n                try {\n                    Logger.warning('API Error', {\n                        options,\n                        response: error.response,\n                    });\n\n                    if(options.actionsOnCode && options.actionsOnCode[error?.response?.status]) {\n                        options.actionsOnCode[error?.response?.status](error?.response);\n                    }\n\n                    return reject(\n                        options.ignoreState\n                            ? {\n                                state: FAIL_FLAG,\n                                type: options.reduxType + '_' + FAIL_FLAG,\n                                payload: mapErrors(error && error.response),\n                                params: options.params,\n                            }\n                            : dispatch({\n                                state: FAIL_FLAG,\n                                type: options.reduxType + '_' + FAIL_FLAG,\n                                payload: mapErrors(error && error.response),\n                                params: options.params,\n                            })\n                    );\n                } catch (error) {\n                    Logger.error('API Network Error', {\n                        options,\n                        error,\n                    });\n\n                    return reject(\n                        options.ignoreState\n                            ? {\n                                state: FAIL_FLAG,\n                                type: options.reduxType + '_' + FAIL_FLAG,\n                                payload: mapErrors(error && error.response),\n                                params: options.params,\n                            }\n                            : dispatch({\n                                state: FAIL_FLAG,\n                                type: options.reduxType + '_' + FAIL_FLAG,\n                                payload: mapErrors(error && error.response),\n                                params: options.params,\n                            })\n                    );\n                }\n            })\n    });\n};\n\n// export function redirectToApiEndpoint(path) {\n//     const store = initializeStore({});\n//     const storeState = store.getState();\n//     const apiUrl = parseToQueryString(process.env.API_URL + path, {\n//         authToken: storeState.user.authToken,\n//     });\n\n//     const win = window.open(\n//         apiUrl,\n//         '_blank'\n//     );\n//     win.focus();\n// }\n\nfunction getRequestCofnig(options: any): AxiosRequestConfig {\n    return {\n        method: options.method.toUpperCase(),\n        url: options.url,\n        headers: {\n            'Content-Type': 'application/json; charset=UTF-8',\n            ...options.headers,\n        },\n        data: options.data,\n        timeout: options.timeout || 10000,\n        responseType: 'json',\n        adapter: options.adapter || undefined,\n        validateStatus: status => {\n            return status >= 200 && status < 300;\n        },\n        paramsSerializer: params => {\n            return JSON.stringify(params);\n        },\n    };\n}\n\nfunction transformOptions(options: ReduxRequestOptions, storeState: ReduxState) {\n    const { publicRuntimeConfig } = getConfig();\n\n    // Attach headers\n    options.headers = {\n        ...options.headers || {},\n    };\n\n    if (storeState.user?.authToken) {\n        options.headers = {\n            ...options.headers,\n            'authorization': 'Bearer ' + storeState.user.authToken,\n        };\n    }\n\n    // Ensure that requestParams is object\n    if (typeof options.requestParams !== 'object' || !options.requestParams) {\n        options.requestParams = {};\n    }\n\n    // Support for PUT request methods\n    if (options.method.toUpperCase() === 'PUT' && !options.forceMethod) {\n        options.method = 'POST';\n        options.requestParams._method = 'PUT';\n    }\n\n    // Support for DELETE request methods\n    if (options.method.toUpperCase() === 'DELETE' && !options.forceMethod) {\n        options.method = 'POST';\n        options.requestParams._method = 'DELETE';\n    }\n\n    if (options.method.toUpperCase() === 'GET') {\n        options.path = parseToQueryString(options.path, options.requestParams);\n    }\n\n    options.data = options.requestParams;\n    if (options.asFormData) {\n        const formData = new FormData();\n        Object.keys(options.data).forEach(key => {\n            formData.append(key, options.data[key]);\n        });\n        options.data = formData;\n    }\n\n    // Get api path\n    options.url = publicRuntimeConfig.API_URL + options.path;\n    if (options.apiUrl) {\n        options.url = options.apiUrl + options.path;\n    }\n\n    return options;\n}\n"]},"metadata":{},"sourceType":"module"}