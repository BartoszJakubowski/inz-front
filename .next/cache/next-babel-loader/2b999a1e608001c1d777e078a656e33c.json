{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { replaceVariables } from 'utils/string';\nexport function filterKeys(obj1 = {}, obj2 = {}, filterMap = []) {\n  const merged = _objectSpread(_objectSpread({}, obj1), obj2);\n\n  const filtered = {};\n  Object.keys(merged).forEach(key => {\n    if (filterMap.includes(key)) {\n      filtered[key] = merged[key];\n    }\n  });\n  return filtered;\n}\nexport function deserialize(json) {\n  const instance = _objectSpread({}, json);\n\n  for (const prop in json) {\n    if (!json[prop]) {\n      instance[prop] = json[prop];\n    }\n\n    if (Array.isArray(json[prop])) {\n      instance[prop] = json[prop];\n    } else if (typeof json[prop] === 'object') {\n      instance[prop] = deserialize(json[prop]);\n    } else {\n      instance[prop] = json[prop];\n    }\n  }\n\n  return instance;\n}\nexport function replaceObjectVariables(object, variables) {\n  if (typeof object === 'string') {\n    return replaceVariables(object, variables);\n  }\n\n  if (!object || object.constructor !== Object) {\n    return object;\n  }\n\n  for (const prop in object) {\n    if (!object[prop]) {\n      continue;\n    }\n\n    if (Array.isArray(object[prop])) {\n      object[prop] = object[prop].map(propValue => replaceObjectVariables(propValue, variables));\n    } else if (typeof object[prop] === 'object') {\n      object[prop] = replaceObjectVariables(object[prop], variables);\n    } else if (typeof object[prop] === 'string') {\n      object[prop] = replaceVariables(object[prop], variables);\n    }\n  }\n\n  return object;\n}\nexport function getKeyValyeByString(object, match) {\n  const path = match.split('.');\n  return getKeyValueByPath(object, path);\n}\nexport function getKeyValueByPath(object, path) {\n  const nextPath = path.shift();\n\n  if (!object) {\n    return undefined;\n  }\n\n  if (typeof object[nextPath] === 'object') {\n    return getKeyValueByPath(object[nextPath], path);\n  } else {\n    return object[nextPath] || undefined;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}