{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { HYDRATE, createWrapper } from 'next-redux-wrapper';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { serialize, deserialize } from 'json-immutable';\nimport state, { initialState } from 'store/state';\n\nconst bindMiddleware = middleware => {\n  if (false) {\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst combinedReducer = combineReducers(state);\n\nconst reducer = (storeState, action) => {\n  if (action.type === HYDRATE) {\n    return _objectSpread(_objectSpread({}, storeState), action.payload);\n  } else {\n    return combinedReducer(storeState, action);\n  }\n};\n\nexport const initStore = context => {\n  return createStore(reducer, initialState, bindMiddleware([thunkMiddleware]));\n};\nexport const wrapper = createWrapper(initStore, {\n  serializeState: nextState => typeof nextState === 'string' ? nextState : serialize(nextState),\n  deserializeState: nextState => typeof nextState === 'string' ? deserialize(nextState) : nextState\n});","map":null,"metadata":{},"sourceType":"module"}