{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Specialization from 'models/Specialization';\nexport let Types;\n\n(function (Types) {\n  Types[\"Primary\"] = \"type_primary\";\n  Types[\"Secondary\"] = \"type_secondary\";\n})(Types || (Types = {}));\n\nexport default class UserSpecialization {\n  constructor(data) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"specializationId\", void 0);\n\n    _defineProperty(this, \"userId\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"typeOption\", void 0);\n\n    _defineProperty(this, \"specialization\", void 0);\n\n    _defineProperty(this, \"getType\", type => {\n      if (type) {\n        if (type === Types.Primary) {\n          return Types.Primary;\n        }\n\n        return Types.Secondary;\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getTypeOption\", type => {\n      return typeOptions.find(option => option.value === type) || null;\n    });\n\n    this.id = data.id;\n    this.specializationId = data.specializationId;\n    this.userId = data.userId;\n    this.type = this.getType(data.type);\n    this.typeOption = this.getTypeOption(data.type);\n    this.specialization = data.specialization && new Specialization(data.specialization) || null;\n  }\n\n}\nexport const typeOptions = [{\n  value: Types.Primary,\n  label: 'Główna'\n}, {\n  value: Types.Secondary,\n  label: 'Poboczna'\n}];","map":{"version":3,"sources":["/home/bartosz/Pulpit/inz/my-app/src/models/UserSpecialization.ts"],"names":["Specialization","Types","UserSpecialization","constructor","data","type","Primary","Secondary","typeOptions","find","option","value","id","specializationId","userId","getType","typeOption","getTypeOption","specialization","label"],"mappings":";;AAKA,OAAOA,cAAP,MAA2B,uBAA3B;AAEA,WAAYC,KAAZ;;WAAYA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;GAAAA,K,KAAAA,K;;AAKZ,eAAe,MAAMC,kBAAN,CAA0C;AAQrDC,EAAAA,WAAW,CAACC,IAAD,EAA8B;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,qCAS9BC,IAAD,IAAwB;AAC9B,UAAIA,IAAJ,EAAU;AACN,YAAGA,IAAI,KAAKJ,KAAK,CAACK,OAAlB,EAA2B;AACvB,iBAAOL,KAAK,CAACK,OAAb;AACH;;AAED,eAAOL,KAAK,CAACM,SAAb;AACH;;AAED,aAAO,IAAP;AACH,KAnBwC;;AAAA,2CAqBxBF,IAAD,IAAgC;AAC5C,aAAOG,WAAW,CAACC,IAAZ,CAAiBC,MAAM,IAAIA,MAAM,CAACC,KAAP,KAAiBN,IAA5C,KAAqD,IAA5D;AACH,KAvBwC;;AACrC,SAAKO,EAAL,GAAUR,IAAI,CAACQ,EAAf;AACA,SAAKC,gBAAL,GAAwBT,IAAI,CAACS,gBAA7B;AACA,SAAKC,MAAL,GAAcV,IAAI,CAACU,MAAnB;AACA,SAAKT,IAAL,GAAY,KAAKU,OAAL,CAAaX,IAAI,CAACC,IAAlB,CAAZ;AACA,SAAKW,UAAL,GAAkB,KAAKC,aAAL,CAAmBb,IAAI,CAACC,IAAxB,CAAlB;AACA,SAAKa,cAAL,GAAsBd,IAAI,CAACc,cAAL,IAAuB,IAAIlB,cAAJ,CAAmBI,IAAI,CAACc,cAAxB,CAAvB,IAAkE,IAAxF;AACH;;AAfoD;AAkCzD,OAAO,MAAMV,WAA4B,GAAG,CAAC;AACzCG,EAAAA,KAAK,EAAEV,KAAK,CAACK,OAD4B;AAEzCa,EAAAA,KAAK,EAAE;AAFkC,CAAD,EAGzC;AACCR,EAAAA,KAAK,EAAEV,KAAK,CAACM,SADd;AAECY,EAAAA,KAAK,EAAE;AAFR,CAHyC,CAArC","sourcesContent":["import Model from 'models/Model';\n\nimport ApiUserSpecialization from 'types/api/UserSpecialization';\nimport { Option } from 'types/options';\n\nimport Specialization from 'models/Specialization';\n\nexport enum Types {\n    Primary = 'type_primary',\n    Secondary = 'type_secondary',\n}\n\nexport default class UserSpecialization implements Model {\n    id: string;\n    specializationId: string;\n    userId: string;\n    type: Types;\n    typeOption: Option<Types>;\n    specialization: Specialization;\n\n    constructor(data: ApiUserSpecialization) {\n        this.id = data.id;\n        this.specializationId = data.specializationId;\n        this.userId = data.userId;\n        this.type = this.getType(data.type);\n        this.typeOption = this.getTypeOption(data.type);\n        this.specialization = data.specialization && new Specialization(data.specialization) || null\n    }\n\n    getType = (type: Types): Types => {\n        if (type) {\n            if(type === Types.Primary) {\n                return Types.Primary;\n            }\n    \n            return Types.Secondary;\n        }\n\n        return null;\n    }\n\n    getTypeOption = (type: Types): Option<Types> => {\n        return typeOptions.find(option => option.value === type) || null;\n    }\n}\n\nexport const typeOptions: Option<Types>[] = [{\n    value: Types.Primary,\n    label: 'Główna',\n}, {\n    value: Types.Secondary,\n    label: 'Poboczna',\n}]"]},"metadata":{},"sourceType":"module"}